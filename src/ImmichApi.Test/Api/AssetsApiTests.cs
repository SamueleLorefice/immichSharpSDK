/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ImmichApi.Client;
using ImmichApi.Api;
// uncomment below to import models
//using ImmichApi.Model;

namespace ImmichApi.Test.Api
{
    /// <summary>
    ///  Class for testing AssetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AssetsApiTests : IDisposable
    {
        private AssetsApi instance;

        public AssetsApiTests()
        {
            instance = new AssetsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AssetsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AssetsApi
            //Assert.IsType<AssetsApi>(instance);
        }

        /// <summary>
        /// Test CheckBulkUpload
        /// </summary>
        [Fact]
        public void CheckBulkUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetBulkUploadCheckDto assetBulkUploadCheckDto = null;
            //var response = instance.CheckBulkUpload(assetBulkUploadCheckDto);
            //Assert.IsType<AssetBulkUploadCheckResponseDto>(response);
        }

        /// <summary>
        /// Test CheckExistingAssets
        /// </summary>
        [Fact]
        public void CheckExistingAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CheckExistingAssetsDto checkExistingAssetsDto = null;
            //var response = instance.CheckExistingAssets(checkExistingAssetsDto);
            //Assert.IsType<CheckExistingAssetsResponseDto>(response);
        }

        /// <summary>
        /// Test DeleteAssets
        /// </summary>
        [Fact]
        public void DeleteAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetBulkDeleteDto assetBulkDeleteDto = null;
            //instance.DeleteAssets(assetBulkDeleteDto);
        }

        /// <summary>
        /// Test DownloadAsset
        /// </summary>
        [Fact]
        public void DownloadAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string? key = null;
            //var response = instance.DownloadAsset(id, key);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetAllUserAssetsByDeviceId
        /// </summary>
        [Fact]
        public void GetAllUserAssetsByDeviceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.GetAllUserAssetsByDeviceId(deviceId);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test GetAssetInfo
        /// </summary>
        [Fact]
        public void GetAssetInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string? key = null;
            //var response = instance.GetAssetInfo(id, key);
            //Assert.IsType<AssetResponseDto>(response);
        }

        /// <summary>
        /// Test GetAssetStatistics
        /// </summary>
        [Fact]
        public void GetAssetStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isArchived = null;
            //bool? isFavorite = null;
            //bool? isTrashed = null;
            //var response = instance.GetAssetStatistics(isArchived, isFavorite, isTrashed);
            //Assert.IsType<AssetStatsResponseDto>(response);
        }

        /// <summary>
        /// Test GetMemoryLane
        /// </summary>
        [Fact]
        public void GetMemoryLaneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int day = null;
            //int month = null;
            //var response = instance.GetMemoryLane(day, month);
            //Assert.IsType<List<MemoryLaneResponseDto>>(response);
        }

        /// <summary>
        /// Test GetRandom
        /// </summary>
        [Fact]
        public void GetRandomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? count = null;
            //var response = instance.GetRandom(count);
            //Assert.IsType<List<AssetResponseDto>>(response);
        }

        /// <summary>
        /// Test PlayAssetVideo
        /// </summary>
        [Fact]
        public void PlayAssetVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string? key = null;
            //var response = instance.PlayAssetVideo(id, key);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test ReplaceAsset
        /// </summary>
        [Fact]
        public void ReplaceAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //System.IO.Stream assetData = null;
            //string deviceAssetId = null;
            //string deviceId = null;
            //DateTime fileCreatedAt = null;
            //DateTime fileModifiedAt = null;
            //string? key = null;
            //string? duration = null;
            //var response = instance.ReplaceAsset(id, assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, duration);
            //Assert.IsType<AssetMediaResponseDto>(response);
        }

        /// <summary>
        /// Test RunAssetJobs
        /// </summary>
        [Fact]
        public void RunAssetJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetJobsDto assetJobsDto = null;
            //instance.RunAssetJobs(assetJobsDto);
        }

        /// <summary>
        /// Test UpdateAsset
        /// </summary>
        [Fact]
        public void UpdateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //UpdateAssetDto updateAssetDto = null;
            //var response = instance.UpdateAsset(id, updateAssetDto);
            //Assert.IsType<AssetResponseDto>(response);
        }

        /// <summary>
        /// Test UpdateAssets
        /// </summary>
        [Fact]
        public void UpdateAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetBulkUpdateDto assetBulkUpdateDto = null;
            //instance.UpdateAssets(assetBulkUpdateDto);
        }

        /// <summary>
        /// Test UpdateStackParent
        /// </summary>
        [Fact]
        public void UpdateStackParentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateStackParentDto updateStackParentDto = null;
            //instance.UpdateStackParent(updateStackParentDto);
        }

        /// <summary>
        /// Test UploadAsset
        /// </summary>
        [Fact]
        public void UploadAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream assetData = null;
            //string deviceAssetId = null;
            //string deviceId = null;
            //DateTime fileCreatedAt = null;
            //DateTime fileModifiedAt = null;
            //string? key = null;
            //string? xImmichChecksum = null;
            //string? duration = null;
            //bool? isArchived = null;
            //bool? isFavorite = null;
            //bool? isOffline = null;
            //bool? isVisible = null;
            //Guid? livePhotoVideoId = null;
            //System.IO.Stream? sidecarData = null;
            //var response = instance.UploadAsset(assetData, deviceAssetId, deviceId, fileCreatedAt, fileModifiedAt, key, xImmichChecksum, duration, isArchived, isFavorite, isOffline, isVisible, livePhotoVideoId, sidecarData);
            //Assert.IsType<AssetMediaResponseDto>(response);
        }

        /// <summary>
        /// Test ViewAsset
        /// </summary>
        [Fact]
        public void ViewAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //string? key = null;
            //AssetMediaSize? size = null;
            //var response = instance.ViewAsset(id, key, size);
            //Assert.IsType<System.IO.Stream>(response);
        }
    }
}

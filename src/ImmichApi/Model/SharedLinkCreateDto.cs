/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SharedLinkCreateDto
    /// </summary>
    [DataContract(Name = "SharedLinkCreateDto")]
    public partial class SharedLinkCreateDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public SharedLinkType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedLinkCreateDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SharedLinkCreateDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedLinkCreateDto" /> class.
        /// </summary>
        /// <param name="albumId">albumId.</param>
        /// <param name="allowDownload">allowDownload (default to true).</param>
        /// <param name="allowUpload">allowUpload.</param>
        /// <param name="assetIds">assetIds.</param>
        /// <param name="description">description.</param>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="password">password.</param>
        /// <param name="showMetadata">showMetadata (default to true).</param>
        /// <param name="type">type (required).</param>
        public SharedLinkCreateDto(Guid albumId = default(Guid), bool allowDownload = true, bool allowUpload = default(bool), List<Guid> assetIds = default(List<Guid>), string description = default(string), DateTime? expiresAt = default(DateTime?), string password = default(string), bool showMetadata = true, SharedLinkType type = default(SharedLinkType))
        {
            this.Type = type;
            this.AlbumId = albumId;
            this.AllowDownload = allowDownload;
            this.AllowUpload = allowUpload;
            this.AssetIds = assetIds;
            this.Description = description;
            this.ExpiresAt = expiresAt;
            this.Password = password;
            this.ShowMetadata = showMetadata;
        }

        /// <summary>
        /// Gets or Sets AlbumId
        /// </summary>
        [DataMember(Name = "albumId", EmitDefaultValue = false)]
        public Guid AlbumId { get; set; }

        /// <summary>
        /// Gets or Sets AllowDownload
        /// </summary>
        [DataMember(Name = "allowDownload", EmitDefaultValue = true)]
        public bool AllowDownload { get; set; }

        /// <summary>
        /// Gets or Sets AllowUpload
        /// </summary>
        [DataMember(Name = "allowUpload", EmitDefaultValue = true)]
        public bool AllowUpload { get; set; }

        /// <summary>
        /// Gets or Sets AssetIds
        /// </summary>
        [DataMember(Name = "assetIds", EmitDefaultValue = false)]
        public List<Guid> AssetIds { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expiresAt", EmitDefaultValue = true)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets ShowMetadata
        /// </summary>
        [DataMember(Name = "showMetadata", EmitDefaultValue = true)]
        public bool ShowMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedLinkCreateDto {\n");
            sb.Append("  AlbumId: ").Append(AlbumId).Append("\n");
            sb.Append("  AllowDownload: ").Append(AllowDownload).Append("\n");
            sb.Append("  AllowUpload: ").Append(AllowUpload).Append("\n");
            sb.Append("  AssetIds: ").Append(AssetIds).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ShowMetadata: ").Append(ShowMetadata).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

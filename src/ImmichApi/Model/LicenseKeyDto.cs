/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// LicenseKeyDto
    /// </summary>
    [DataContract(Name = "LicenseKeyDto")]
    public partial class LicenseKeyDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseKeyDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LicenseKeyDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseKeyDto" /> class.
        /// </summary>
        /// <param name="activationKey">activationKey (required).</param>
        /// <param name="licenseKey">licenseKey (required).</param>
        public LicenseKeyDto(string activationKey = default(string), string licenseKey = default(string))
        {
            // to ensure "activationKey" is required (not null)
            if (activationKey == null)
            {
                throw new ArgumentNullException("activationKey is a required property for LicenseKeyDto and cannot be null");
            }
            this.ActivationKey = activationKey;
            // to ensure "licenseKey" is required (not null)
            if (licenseKey == null)
            {
                throw new ArgumentNullException("licenseKey is a required property for LicenseKeyDto and cannot be null");
            }
            this.LicenseKey = licenseKey;
        }

        /// <summary>
        /// Gets or Sets ActivationKey
        /// </summary>
        [DataMember(Name = "activationKey", IsRequired = true, EmitDefaultValue = true)]
        public string ActivationKey { get; set; }

        /// <summary>
        /// Gets or Sets LicenseKey
        /// </summary>
        [DataMember(Name = "licenseKey", IsRequired = true, EmitDefaultValue = true)]
        public string LicenseKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LicenseKeyDto {\n");
            sb.Append("  ActivationKey: ").Append(ActivationKey).Append("\n");
            sb.Append("  LicenseKey: ").Append(LicenseKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.LicenseKey != null) {
                // LicenseKey (string) pattern
                Regex regexLicenseKey = new Regex(@"IM(SV|CL)(-[\dA-Za-z]{4}){8}", RegexOptions.CultureInvariant);
                if (!regexLicenseKey.Match(this.LicenseKey).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseKey, must match a pattern of " + regexLicenseKey, new [] { "LicenseKey" });
                }
            }

            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SystemConfigDto
    /// </summary>
    [DataContract(Name = "SystemConfigDto")]
    public partial class SystemConfigDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfigDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigDto" /> class.
        /// </summary>
        /// <param name="ffmpeg">ffmpeg (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="job">job (required).</param>
        /// <param name="library">library (required).</param>
        /// <param name="logging">logging (required).</param>
        /// <param name="machineLearning">machineLearning (required).</param>
        /// <param name="map">map (required).</param>
        /// <param name="newVersionCheck">newVersionCheck (required).</param>
        /// <param name="notifications">notifications (required).</param>
        /// <param name="oauth">oauth (required).</param>
        /// <param name="passwordLogin">passwordLogin (required).</param>
        /// <param name="reverseGeocoding">reverseGeocoding (required).</param>
        /// <param name="server">server (required).</param>
        /// <param name="storageTemplate">storageTemplate (required).</param>
        /// <param name="theme">theme (required).</param>
        /// <param name="trash">trash (required).</param>
        /// <param name="user">user (required).</param>
        public SystemConfigDto(SystemConfigFFmpegDto ffmpeg = default(SystemConfigFFmpegDto), SystemConfigImageDto image = default(SystemConfigImageDto), SystemConfigJobDto job = default(SystemConfigJobDto), SystemConfigLibraryDto library = default(SystemConfigLibraryDto), SystemConfigLoggingDto logging = default(SystemConfigLoggingDto), SystemConfigMachineLearningDto machineLearning = default(SystemConfigMachineLearningDto), SystemConfigMapDto map = default(SystemConfigMapDto), SystemConfigNewVersionCheckDto newVersionCheck = default(SystemConfigNewVersionCheckDto), SystemConfigNotificationsDto notifications = default(SystemConfigNotificationsDto), SystemConfigOAuthDto oauth = default(SystemConfigOAuthDto), SystemConfigPasswordLoginDto passwordLogin = default(SystemConfigPasswordLoginDto), SystemConfigReverseGeocodingDto reverseGeocoding = default(SystemConfigReverseGeocodingDto), SystemConfigServerDto server = default(SystemConfigServerDto), SystemConfigStorageTemplateDto storageTemplate = default(SystemConfigStorageTemplateDto), SystemConfigThemeDto theme = default(SystemConfigThemeDto), SystemConfigTrashDto trash = default(SystemConfigTrashDto), SystemConfigUserDto user = default(SystemConfigUserDto))
        {
            // to ensure "ffmpeg" is required (not null)
            if (ffmpeg == null)
            {
                throw new ArgumentNullException("ffmpeg is a required property for SystemConfigDto and cannot be null");
            }
            this.Ffmpeg = ffmpeg;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for SystemConfigDto and cannot be null");
            }
            this.Image = image;
            // to ensure "job" is required (not null)
            if (job == null)
            {
                throw new ArgumentNullException("job is a required property for SystemConfigDto and cannot be null");
            }
            this.Job = job;
            // to ensure "library" is required (not null)
            if (library == null)
            {
                throw new ArgumentNullException("library is a required property for SystemConfigDto and cannot be null");
            }
            this.Library = library;
            // to ensure "logging" is required (not null)
            if (logging == null)
            {
                throw new ArgumentNullException("logging is a required property for SystemConfigDto and cannot be null");
            }
            this.Logging = logging;
            // to ensure "machineLearning" is required (not null)
            if (machineLearning == null)
            {
                throw new ArgumentNullException("machineLearning is a required property for SystemConfigDto and cannot be null");
            }
            this.MachineLearning = machineLearning;
            // to ensure "map" is required (not null)
            if (map == null)
            {
                throw new ArgumentNullException("map is a required property for SystemConfigDto and cannot be null");
            }
            this.Map = map;
            // to ensure "newVersionCheck" is required (not null)
            if (newVersionCheck == null)
            {
                throw new ArgumentNullException("newVersionCheck is a required property for SystemConfigDto and cannot be null");
            }
            this.NewVersionCheck = newVersionCheck;
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new ArgumentNullException("notifications is a required property for SystemConfigDto and cannot be null");
            }
            this.Notifications = notifications;
            // to ensure "oauth" is required (not null)
            if (oauth == null)
            {
                throw new ArgumentNullException("oauth is a required property for SystemConfigDto and cannot be null");
            }
            this.Oauth = oauth;
            // to ensure "passwordLogin" is required (not null)
            if (passwordLogin == null)
            {
                throw new ArgumentNullException("passwordLogin is a required property for SystemConfigDto and cannot be null");
            }
            this.PasswordLogin = passwordLogin;
            // to ensure "reverseGeocoding" is required (not null)
            if (reverseGeocoding == null)
            {
                throw new ArgumentNullException("reverseGeocoding is a required property for SystemConfigDto and cannot be null");
            }
            this.ReverseGeocoding = reverseGeocoding;
            // to ensure "server" is required (not null)
            if (server == null)
            {
                throw new ArgumentNullException("server is a required property for SystemConfigDto and cannot be null");
            }
            this.Server = server;
            // to ensure "storageTemplate" is required (not null)
            if (storageTemplate == null)
            {
                throw new ArgumentNullException("storageTemplate is a required property for SystemConfigDto and cannot be null");
            }
            this.StorageTemplate = storageTemplate;
            // to ensure "theme" is required (not null)
            if (theme == null)
            {
                throw new ArgumentNullException("theme is a required property for SystemConfigDto and cannot be null");
            }
            this.Theme = theme;
            // to ensure "trash" is required (not null)
            if (trash == null)
            {
                throw new ArgumentNullException("trash is a required property for SystemConfigDto and cannot be null");
            }
            this.Trash = trash;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for SystemConfigDto and cannot be null");
            }
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Ffmpeg
        /// </summary>
        [DataMember(Name = "ffmpeg", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigFFmpegDto Ffmpeg { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigImageDto Image { get; set; }

        /// <summary>
        /// Gets or Sets Job
        /// </summary>
        [DataMember(Name = "job", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigJobDto Job { get; set; }

        /// <summary>
        /// Gets or Sets Library
        /// </summary>
        [DataMember(Name = "library", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigLibraryDto Library { get; set; }

        /// <summary>
        /// Gets or Sets Logging
        /// </summary>
        [DataMember(Name = "logging", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigLoggingDto Logging { get; set; }

        /// <summary>
        /// Gets or Sets MachineLearning
        /// </summary>
        [DataMember(Name = "machineLearning", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigMachineLearningDto MachineLearning { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name = "map", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigMapDto Map { get; set; }

        /// <summary>
        /// Gets or Sets NewVersionCheck
        /// </summary>
        [DataMember(Name = "newVersionCheck", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigNewVersionCheckDto NewVersionCheck { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name = "notifications", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigNotificationsDto Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Oauth
        /// </summary>
        [DataMember(Name = "oauth", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigOAuthDto Oauth { get; set; }

        /// <summary>
        /// Gets or Sets PasswordLogin
        /// </summary>
        [DataMember(Name = "passwordLogin", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigPasswordLoginDto PasswordLogin { get; set; }

        /// <summary>
        /// Gets or Sets ReverseGeocoding
        /// </summary>
        [DataMember(Name = "reverseGeocoding", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigReverseGeocodingDto ReverseGeocoding { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigServerDto Server { get; set; }

        /// <summary>
        /// Gets or Sets StorageTemplate
        /// </summary>
        [DataMember(Name = "storageTemplate", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigStorageTemplateDto StorageTemplate { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name = "theme", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigThemeDto Theme { get; set; }

        /// <summary>
        /// Gets or Sets Trash
        /// </summary>
        [DataMember(Name = "trash", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigTrashDto Trash { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigUserDto User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigDto {\n");
            sb.Append("  Ffmpeg: ").Append(Ffmpeg).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Job: ").Append(Job).Append("\n");
            sb.Append("  Library: ").Append(Library).Append("\n");
            sb.Append("  Logging: ").Append(Logging).Append("\n");
            sb.Append("  MachineLearning: ").Append(MachineLearning).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  NewVersionCheck: ").Append(NewVersionCheck).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("  PasswordLogin: ").Append(PasswordLogin).Append("\n");
            sb.Append("  ReverseGeocoding: ").Append(ReverseGeocoding).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  StorageTemplate: ").Append(StorageTemplate).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Trash: ").Append(Trash).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

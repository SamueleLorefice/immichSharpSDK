/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// PeopleResponseDto
    /// </summary>
    [DataContract(Name = "PeopleResponseDto")]
    public partial class PeopleResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PeopleResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleResponseDto" /> class.
        /// </summary>
        /// <param name="hasNextPage">This property was added in v1.110.0.</param>
        /// <param name="hidden">hidden (required).</param>
        /// <param name="people">people (required).</param>
        /// <param name="total">total (required).</param>
        public PeopleResponseDto(bool hasNextPage = default(bool), int hidden = default(int), List<PersonResponseDto> people = default(List<PersonResponseDto>), int total = default(int))
        {
            this.Hidden = hidden;
            // to ensure "people" is required (not null)
            if (people == null)
            {
                throw new ArgumentNullException("people is a required property for PeopleResponseDto and cannot be null");
            }
            this.People = people;
            this.Total = total;
            this.HasNextPage = hasNextPage;
        }

        /// <summary>
        /// This property was added in v1.110.0
        /// </summary>
        /// <value>This property was added in v1.110.0</value>
        [DataMember(Name = "hasNextPage", EmitDefaultValue = true)]
        public bool HasNextPage { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name = "hidden", IsRequired = true, EmitDefaultValue = true)]
        public int Hidden { get; set; }

        /// <summary>
        /// Gets or Sets People
        /// </summary>
        [DataMember(Name = "people", IsRequired = true, EmitDefaultValue = true)]
        public List<PersonResponseDto> People { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = true)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeopleResponseDto {\n");
            sb.Append("  HasNextPage: ").Append(HasNextPage).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

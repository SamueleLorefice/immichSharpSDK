/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SystemConfigImageDto
    /// </summary>
    [DataContract(Name = "SystemConfigImageDto")]
    public partial class SystemConfigImageDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Colorspace
        /// </summary>
        [DataMember(Name = "colorspace", IsRequired = true, EmitDefaultValue = true)]
        public Colorspace Colorspace { get; set; }

        /// <summary>
        /// Gets or Sets PreviewFormat
        /// </summary>
        [DataMember(Name = "previewFormat", IsRequired = true, EmitDefaultValue = true)]
        public ImageFormat PreviewFormat { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailFormat
        /// </summary>
        [DataMember(Name = "thumbnailFormat", IsRequired = true, EmitDefaultValue = true)]
        public ImageFormat ThumbnailFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigImageDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfigImageDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigImageDto" /> class.
        /// </summary>
        /// <param name="colorspace">colorspace (required).</param>
        /// <param name="extractEmbedded">extractEmbedded (required).</param>
        /// <param name="previewFormat">previewFormat (required).</param>
        /// <param name="previewSize">previewSize (required).</param>
        /// <param name="quality">quality (required).</param>
        /// <param name="thumbnailFormat">thumbnailFormat (required).</param>
        /// <param name="thumbnailSize">thumbnailSize (required).</param>
        public SystemConfigImageDto(Colorspace colorspace = default(Colorspace), bool extractEmbedded = default(bool), ImageFormat previewFormat = default(ImageFormat), int previewSize = default(int), int quality = default(int), ImageFormat thumbnailFormat = default(ImageFormat), int thumbnailSize = default(int))
        {
            this.Colorspace = colorspace;
            this.ExtractEmbedded = extractEmbedded;
            this.PreviewFormat = previewFormat;
            this.PreviewSize = previewSize;
            this.Quality = quality;
            this.ThumbnailFormat = thumbnailFormat;
            this.ThumbnailSize = thumbnailSize;
        }

        /// <summary>
        /// Gets or Sets ExtractEmbedded
        /// </summary>
        [DataMember(Name = "extractEmbedded", IsRequired = true, EmitDefaultValue = true)]
        public bool ExtractEmbedded { get; set; }

        /// <summary>
        /// Gets or Sets PreviewSize
        /// </summary>
        [DataMember(Name = "previewSize", IsRequired = true, EmitDefaultValue = true)]
        public int PreviewSize { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", IsRequired = true, EmitDefaultValue = true)]
        public int Quality { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailSize
        /// </summary>
        [DataMember(Name = "thumbnailSize", IsRequired = true, EmitDefaultValue = true)]
        public int ThumbnailSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigImageDto {\n");
            sb.Append("  Colorspace: ").Append(Colorspace).Append("\n");
            sb.Append("  ExtractEmbedded: ").Append(ExtractEmbedded).Append("\n");
            sb.Append("  PreviewFormat: ").Append(PreviewFormat).Append("\n");
            sb.Append("  PreviewSize: ").Append(PreviewSize).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  ThumbnailFormat: ").Append(ThumbnailFormat).Append("\n");
            sb.Append("  ThumbnailSize: ").Append(ThumbnailSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PreviewSize (int) minimum
            if (this.PreviewSize < (int)1)
            {
                yield return new ValidationResult("Invalid value for PreviewSize, must be a value greater than or equal to 1.", new [] { "PreviewSize" });
            }

            // Quality (int) maximum
            if (this.Quality > (int)100)
            {
                yield return new ValidationResult("Invalid value for Quality, must be a value less than or equal to 100.", new [] { "Quality" });
            }

            // Quality (int) minimum
            if (this.Quality < (int)1)
            {
                yield return new ValidationResult("Invalid value for Quality, must be a value greater than or equal to 1.", new [] { "Quality" });
            }

            // ThumbnailSize (int) minimum
            if (this.ThumbnailSize < (int)1)
            {
                yield return new ValidationResult("Invalid value for ThumbnailSize, must be a value greater than or equal to 1.", new [] { "ThumbnailSize" });
            }

            yield break;
        }
    }

}

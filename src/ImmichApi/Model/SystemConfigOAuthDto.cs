/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SystemConfigOAuthDto
    /// </summary>
    [DataContract(Name = "SystemConfigOAuthDto")]
    public partial class SystemConfigOAuthDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigOAuthDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfigOAuthDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigOAuthDto" /> class.
        /// </summary>
        /// <param name="autoLaunch">autoLaunch (required).</param>
        /// <param name="autoRegister">autoRegister (required).</param>
        /// <param name="buttonText">buttonText (required).</param>
        /// <param name="clientId">clientId (required).</param>
        /// <param name="clientSecret">clientSecret (required).</param>
        /// <param name="defaultStorageQuota">defaultStorageQuota (required).</param>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="issuerUrl">issuerUrl (required).</param>
        /// <param name="mobileOverrideEnabled">mobileOverrideEnabled (required).</param>
        /// <param name="mobileRedirectUri">mobileRedirectUri (required).</param>
        /// <param name="profileSigningAlgorithm">profileSigningAlgorithm (required).</param>
        /// <param name="scope">scope (required).</param>
        /// <param name="signingAlgorithm">signingAlgorithm (required).</param>
        /// <param name="storageLabelClaim">storageLabelClaim (required).</param>
        /// <param name="storageQuotaClaim">storageQuotaClaim (required).</param>
        public SystemConfigOAuthDto(bool autoLaunch = default(bool), bool autoRegister = default(bool), string buttonText = default(string), string clientId = default(string), string clientSecret = default(string), decimal defaultStorageQuota = default(decimal), bool enabled = default(bool), string issuerUrl = default(string), bool mobileOverrideEnabled = default(bool), string mobileRedirectUri = default(string), string profileSigningAlgorithm = default(string), string scope = default(string), string signingAlgorithm = default(string), string storageLabelClaim = default(string), string storageQuotaClaim = default(string))
        {
            this.AutoLaunch = autoLaunch;
            this.AutoRegister = autoRegister;
            // to ensure "buttonText" is required (not null)
            if (buttonText == null)
            {
                throw new ArgumentNullException("buttonText is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.ButtonText = buttonText;
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "clientSecret" is required (not null)
            if (clientSecret == null)
            {
                throw new ArgumentNullException("clientSecret is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.ClientSecret = clientSecret;
            this.DefaultStorageQuota = defaultStorageQuota;
            this.Enabled = enabled;
            // to ensure "issuerUrl" is required (not null)
            if (issuerUrl == null)
            {
                throw new ArgumentNullException("issuerUrl is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.IssuerUrl = issuerUrl;
            this.MobileOverrideEnabled = mobileOverrideEnabled;
            // to ensure "mobileRedirectUri" is required (not null)
            if (mobileRedirectUri == null)
            {
                throw new ArgumentNullException("mobileRedirectUri is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.MobileRedirectUri = mobileRedirectUri;
            // to ensure "profileSigningAlgorithm" is required (not null)
            if (profileSigningAlgorithm == null)
            {
                throw new ArgumentNullException("profileSigningAlgorithm is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.ProfileSigningAlgorithm = profileSigningAlgorithm;
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new ArgumentNullException("scope is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.Scope = scope;
            // to ensure "signingAlgorithm" is required (not null)
            if (signingAlgorithm == null)
            {
                throw new ArgumentNullException("signingAlgorithm is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.SigningAlgorithm = signingAlgorithm;
            // to ensure "storageLabelClaim" is required (not null)
            if (storageLabelClaim == null)
            {
                throw new ArgumentNullException("storageLabelClaim is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.StorageLabelClaim = storageLabelClaim;
            // to ensure "storageQuotaClaim" is required (not null)
            if (storageQuotaClaim == null)
            {
                throw new ArgumentNullException("storageQuotaClaim is a required property for SystemConfigOAuthDto and cannot be null");
            }
            this.StorageQuotaClaim = storageQuotaClaim;
        }

        /// <summary>
        /// Gets or Sets AutoLaunch
        /// </summary>
        [DataMember(Name = "autoLaunch", IsRequired = true, EmitDefaultValue = true)]
        public bool AutoLaunch { get; set; }

        /// <summary>
        /// Gets or Sets AutoRegister
        /// </summary>
        [DataMember(Name = "autoRegister", IsRequired = true, EmitDefaultValue = true)]
        public bool AutoRegister { get; set; }

        /// <summary>
        /// Gets or Sets ButtonText
        /// </summary>
        [DataMember(Name = "buttonText", IsRequired = true, EmitDefaultValue = true)]
        public string ButtonText { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "clientId", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name = "clientSecret", IsRequired = true, EmitDefaultValue = true)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets DefaultStorageQuota
        /// </summary>
        [DataMember(Name = "defaultStorageQuota", IsRequired = true, EmitDefaultValue = true)]
        public decimal DefaultStorageQuota { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IssuerUrl
        /// </summary>
        [DataMember(Name = "issuerUrl", IsRequired = true, EmitDefaultValue = true)]
        public string IssuerUrl { get; set; }

        /// <summary>
        /// Gets or Sets MobileOverrideEnabled
        /// </summary>
        [DataMember(Name = "mobileOverrideEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool MobileOverrideEnabled { get; set; }

        /// <summary>
        /// Gets or Sets MobileRedirectUri
        /// </summary>
        [DataMember(Name = "mobileRedirectUri", IsRequired = true, EmitDefaultValue = true)]
        public string MobileRedirectUri { get; set; }

        /// <summary>
        /// Gets or Sets ProfileSigningAlgorithm
        /// </summary>
        [DataMember(Name = "profileSigningAlgorithm", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileSigningAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets SigningAlgorithm
        /// </summary>
        [DataMember(Name = "signingAlgorithm", IsRequired = true, EmitDefaultValue = true)]
        public string SigningAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets StorageLabelClaim
        /// </summary>
        [DataMember(Name = "storageLabelClaim", IsRequired = true, EmitDefaultValue = true)]
        public string StorageLabelClaim { get; set; }

        /// <summary>
        /// Gets or Sets StorageQuotaClaim
        /// </summary>
        [DataMember(Name = "storageQuotaClaim", IsRequired = true, EmitDefaultValue = true)]
        public string StorageQuotaClaim { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigOAuthDto {\n");
            sb.Append("  AutoLaunch: ").Append(AutoLaunch).Append("\n");
            sb.Append("  AutoRegister: ").Append(AutoRegister).Append("\n");
            sb.Append("  ButtonText: ").Append(ButtonText).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  DefaultStorageQuota: ").Append(DefaultStorageQuota).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IssuerUrl: ").Append(IssuerUrl).Append("\n");
            sb.Append("  MobileOverrideEnabled: ").Append(MobileOverrideEnabled).Append("\n");
            sb.Append("  MobileRedirectUri: ").Append(MobileRedirectUri).Append("\n");
            sb.Append("  ProfileSigningAlgorithm: ").Append(ProfileSigningAlgorithm).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SigningAlgorithm: ").Append(SigningAlgorithm).Append("\n");
            sb.Append("  StorageLabelClaim: ").Append(StorageLabelClaim).Append("\n");
            sb.Append("  StorageQuotaClaim: ").Append(StorageQuotaClaim).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DefaultStorageQuota (decimal) minimum
            if (this.DefaultStorageQuota < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for DefaultStorageQuota, must be a value greater than or equal to 0.", new [] { "DefaultStorageQuota" });
            }

            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// CreateLibraryDto
    /// </summary>
    [DataContract(Name = "CreateLibraryDto")]
    public partial class CreateLibraryDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLibraryDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateLibraryDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLibraryDto" /> class.
        /// </summary>
        /// <param name="exclusionPatterns">exclusionPatterns.</param>
        /// <param name="importPaths">importPaths.</param>
        /// <param name="name">name.</param>
        /// <param name="ownerId">ownerId (required).</param>
        public CreateLibraryDto(List<string> exclusionPatterns = default(List<string>), List<string> importPaths = default(List<string>), string name = default(string), Guid ownerId = default(Guid))
        {
            this.OwnerId = ownerId;
            this.ExclusionPatterns = exclusionPatterns;
            this.ImportPaths = importPaths;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets ExclusionPatterns
        /// </summary>
        [DataMember(Name = "exclusionPatterns", EmitDefaultValue = false)]
        public List<string> ExclusionPatterns { get; set; }

        /// <summary>
        /// Gets or Sets ImportPaths
        /// </summary>
        [DataMember(Name = "importPaths", EmitDefaultValue = false)]
        public List<string> ImportPaths { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "ownerId", IsRequired = true, EmitDefaultValue = true)]
        public Guid OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLibraryDto {\n");
            sb.Append("  ExclusionPatterns: ").Append(ExclusionPatterns).Append("\n");
            sb.Append("  ImportPaths: ").Append(ImportPaths).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

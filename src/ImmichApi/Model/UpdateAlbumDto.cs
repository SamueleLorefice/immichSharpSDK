/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// UpdateAlbumDto
    /// </summary>
    [DataContract(Name = "UpdateAlbumDto")]
    public partial class UpdateAlbumDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public AssetOrder? Order { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAlbumDto" /> class.
        /// </summary>
        /// <param name="albumName">albumName.</param>
        /// <param name="albumThumbnailAssetId">albumThumbnailAssetId.</param>
        /// <param name="description">description.</param>
        /// <param name="isActivityEnabled">isActivityEnabled.</param>
        /// <param name="order">order.</param>
        public UpdateAlbumDto(string albumName = default(string), Guid albumThumbnailAssetId = default(Guid), string description = default(string), bool isActivityEnabled = default(bool), AssetOrder? order = default(AssetOrder?))
        {
            this.AlbumName = albumName;
            this.AlbumThumbnailAssetId = albumThumbnailAssetId;
            this.Description = description;
            this.IsActivityEnabled = isActivityEnabled;
            this.Order = order;
        }

        /// <summary>
        /// Gets or Sets AlbumName
        /// </summary>
        [DataMember(Name = "albumName", EmitDefaultValue = false)]
        public string AlbumName { get; set; }

        /// <summary>
        /// Gets or Sets AlbumThumbnailAssetId
        /// </summary>
        [DataMember(Name = "albumThumbnailAssetId", EmitDefaultValue = false)]
        public Guid AlbumThumbnailAssetId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsActivityEnabled
        /// </summary>
        [DataMember(Name = "isActivityEnabled", EmitDefaultValue = true)]
        public bool IsActivityEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAlbumDto {\n");
            sb.Append("  AlbumName: ").Append(AlbumName).Append("\n");
            sb.Append("  AlbumThumbnailAssetId: ").Append(AlbumThumbnailAssetId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActivityEnabled: ").Append(IsActivityEnabled).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

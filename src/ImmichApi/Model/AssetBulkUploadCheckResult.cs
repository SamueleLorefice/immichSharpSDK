/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// AssetBulkUploadCheckResult
    /// </summary>
    [DataContract(Name = "AssetBulkUploadCheckResult")]
    public partial class AssetBulkUploadCheckResult : IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Accept for value: accept
            /// </summary>
            [EnumMember(Value = "accept")]
            Accept = 1,

            /// <summary>
            /// Enum Reject for value: reject
            /// </summary>
            [EnumMember(Value = "reject")]
            Reject = 2
        }


        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Defines Reason
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum Duplicate for value: duplicate
            /// </summary>
            [EnumMember(Value = "duplicate")]
            Duplicate = 1,

            /// <summary>
            /// Enum UnsupportedFormat for value: unsupported-format
            /// </summary>
            [EnumMember(Value = "unsupported-format")]
            UnsupportedFormat = 2
        }


        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetBulkUploadCheckResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetBulkUploadCheckResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetBulkUploadCheckResult" /> class.
        /// </summary>
        /// <param name="action">action (required).</param>
        /// <param name="assetId">assetId.</param>
        /// <param name="id">id (required).</param>
        /// <param name="reason">reason.</param>
        public AssetBulkUploadCheckResult(ActionEnum action = default(ActionEnum), string assetId = default(string), string id = default(string), ReasonEnum? reason = default(ReasonEnum?))
        {
            this.Action = action;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AssetBulkUploadCheckResult and cannot be null");
            }
            this.Id = id;
            this.AssetId = assetId;
            this.Reason = reason;
        }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name = "assetId", EmitDefaultValue = false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetBulkUploadCheckResult {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// ServerConfigDto
    /// </summary>
    [DataContract(Name = "ServerConfigDto")]
    public partial class ServerConfigDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfigDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServerConfigDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfigDto" /> class.
        /// </summary>
        /// <param name="externalDomain">externalDomain (required).</param>
        /// <param name="isInitialized">isInitialized (required).</param>
        /// <param name="isOnboarded">isOnboarded (required).</param>
        /// <param name="loginPageMessage">loginPageMessage (required).</param>
        /// <param name="oauthButtonText">oauthButtonText (required).</param>
        /// <param name="trashDays">trashDays (required).</param>
        /// <param name="userDeleteDelay">userDeleteDelay (required).</param>
        public ServerConfigDto(string externalDomain = default(string), bool isInitialized = default(bool), bool isOnboarded = default(bool), string loginPageMessage = default(string), string oauthButtonText = default(string), int trashDays = default(int), int userDeleteDelay = default(int))
        {
            // to ensure "externalDomain" is required (not null)
            if (externalDomain == null)
            {
                throw new ArgumentNullException("externalDomain is a required property for ServerConfigDto and cannot be null");
            }
            this.ExternalDomain = externalDomain;
            this.IsInitialized = isInitialized;
            this.IsOnboarded = isOnboarded;
            // to ensure "loginPageMessage" is required (not null)
            if (loginPageMessage == null)
            {
                throw new ArgumentNullException("loginPageMessage is a required property for ServerConfigDto and cannot be null");
            }
            this.LoginPageMessage = loginPageMessage;
            // to ensure "oauthButtonText" is required (not null)
            if (oauthButtonText == null)
            {
                throw new ArgumentNullException("oauthButtonText is a required property for ServerConfigDto and cannot be null");
            }
            this.OauthButtonText = oauthButtonText;
            this.TrashDays = trashDays;
            this.UserDeleteDelay = userDeleteDelay;
        }

        /// <summary>
        /// Gets or Sets ExternalDomain
        /// </summary>
        [DataMember(Name = "externalDomain", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalDomain { get; set; }

        /// <summary>
        /// Gets or Sets IsInitialized
        /// </summary>
        [DataMember(Name = "isInitialized", IsRequired = true, EmitDefaultValue = true)]
        public bool IsInitialized { get; set; }

        /// <summary>
        /// Gets or Sets IsOnboarded
        /// </summary>
        [DataMember(Name = "isOnboarded", IsRequired = true, EmitDefaultValue = true)]
        public bool IsOnboarded { get; set; }

        /// <summary>
        /// Gets or Sets LoginPageMessage
        /// </summary>
        [DataMember(Name = "loginPageMessage", IsRequired = true, EmitDefaultValue = true)]
        public string LoginPageMessage { get; set; }

        /// <summary>
        /// Gets or Sets OauthButtonText
        /// </summary>
        [DataMember(Name = "oauthButtonText", IsRequired = true, EmitDefaultValue = true)]
        public string OauthButtonText { get; set; }

        /// <summary>
        /// Gets or Sets TrashDays
        /// </summary>
        [DataMember(Name = "trashDays", IsRequired = true, EmitDefaultValue = true)]
        public int TrashDays { get; set; }

        /// <summary>
        /// Gets or Sets UserDeleteDelay
        /// </summary>
        [DataMember(Name = "userDeleteDelay", IsRequired = true, EmitDefaultValue = true)]
        public int UserDeleteDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerConfigDto {\n");
            sb.Append("  ExternalDomain: ").Append(ExternalDomain).Append("\n");
            sb.Append("  IsInitialized: ").Append(IsInitialized).Append("\n");
            sb.Append("  IsOnboarded: ").Append(IsOnboarded).Append("\n");
            sb.Append("  LoginPageMessage: ").Append(LoginPageMessage).Append("\n");
            sb.Append("  OauthButtonText: ").Append(OauthButtonText).Append("\n");
            sb.Append("  TrashDays: ").Append(TrashDays).Append("\n");
            sb.Append("  UserDeleteDelay: ").Append(UserDeleteDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SystemConfigJobDto
    /// </summary>
    [DataContract(Name = "SystemConfigJobDto")]
    public partial class SystemConfigJobDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigJobDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfigJobDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigJobDto" /> class.
        /// </summary>
        /// <param name="backgroundTask">backgroundTask (required).</param>
        /// <param name="faceDetection">faceDetection (required).</param>
        /// <param name="library">library (required).</param>
        /// <param name="metadataExtraction">metadataExtraction (required).</param>
        /// <param name="migration">migration (required).</param>
        /// <param name="notifications">notifications (required).</param>
        /// <param name="search">search (required).</param>
        /// <param name="sidecar">sidecar (required).</param>
        /// <param name="smartSearch">smartSearch (required).</param>
        /// <param name="thumbnailGeneration">thumbnailGeneration (required).</param>
        /// <param name="videoConversion">videoConversion (required).</param>
        public SystemConfigJobDto(JobSettingsDto backgroundTask = default(JobSettingsDto), JobSettingsDto faceDetection = default(JobSettingsDto), JobSettingsDto library = default(JobSettingsDto), JobSettingsDto metadataExtraction = default(JobSettingsDto), JobSettingsDto migration = default(JobSettingsDto), JobSettingsDto notifications = default(JobSettingsDto), JobSettingsDto search = default(JobSettingsDto), JobSettingsDto sidecar = default(JobSettingsDto), JobSettingsDto smartSearch = default(JobSettingsDto), JobSettingsDto thumbnailGeneration = default(JobSettingsDto), JobSettingsDto videoConversion = default(JobSettingsDto))
        {
            // to ensure "backgroundTask" is required (not null)
            if (backgroundTask == null)
            {
                throw new ArgumentNullException("backgroundTask is a required property for SystemConfigJobDto and cannot be null");
            }
            this.BackgroundTask = backgroundTask;
            // to ensure "faceDetection" is required (not null)
            if (faceDetection == null)
            {
                throw new ArgumentNullException("faceDetection is a required property for SystemConfigJobDto and cannot be null");
            }
            this.FaceDetection = faceDetection;
            // to ensure "library" is required (not null)
            if (library == null)
            {
                throw new ArgumentNullException("library is a required property for SystemConfigJobDto and cannot be null");
            }
            this.Library = library;
            // to ensure "metadataExtraction" is required (not null)
            if (metadataExtraction == null)
            {
                throw new ArgumentNullException("metadataExtraction is a required property for SystemConfigJobDto and cannot be null");
            }
            this.MetadataExtraction = metadataExtraction;
            // to ensure "migration" is required (not null)
            if (migration == null)
            {
                throw new ArgumentNullException("migration is a required property for SystemConfigJobDto and cannot be null");
            }
            this.Migration = migration;
            // to ensure "notifications" is required (not null)
            if (notifications == null)
            {
                throw new ArgumentNullException("notifications is a required property for SystemConfigJobDto and cannot be null");
            }
            this.Notifications = notifications;
            // to ensure "search" is required (not null)
            if (search == null)
            {
                throw new ArgumentNullException("search is a required property for SystemConfigJobDto and cannot be null");
            }
            this.Search = search;
            // to ensure "sidecar" is required (not null)
            if (sidecar == null)
            {
                throw new ArgumentNullException("sidecar is a required property for SystemConfigJobDto and cannot be null");
            }
            this.Sidecar = sidecar;
            // to ensure "smartSearch" is required (not null)
            if (smartSearch == null)
            {
                throw new ArgumentNullException("smartSearch is a required property for SystemConfigJobDto and cannot be null");
            }
            this.SmartSearch = smartSearch;
            // to ensure "thumbnailGeneration" is required (not null)
            if (thumbnailGeneration == null)
            {
                throw new ArgumentNullException("thumbnailGeneration is a required property for SystemConfigJobDto and cannot be null");
            }
            this.ThumbnailGeneration = thumbnailGeneration;
            // to ensure "videoConversion" is required (not null)
            if (videoConversion == null)
            {
                throw new ArgumentNullException("videoConversion is a required property for SystemConfigJobDto and cannot be null");
            }
            this.VideoConversion = videoConversion;
        }

        /// <summary>
        /// Gets or Sets BackgroundTask
        /// </summary>
        [DataMember(Name = "backgroundTask", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto BackgroundTask { get; set; }

        /// <summary>
        /// Gets or Sets FaceDetection
        /// </summary>
        [DataMember(Name = "faceDetection", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto FaceDetection { get; set; }

        /// <summary>
        /// Gets or Sets Library
        /// </summary>
        [DataMember(Name = "library", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto Library { get; set; }

        /// <summary>
        /// Gets or Sets MetadataExtraction
        /// </summary>
        [DataMember(Name = "metadataExtraction", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto MetadataExtraction { get; set; }

        /// <summary>
        /// Gets or Sets Migration
        /// </summary>
        [DataMember(Name = "migration", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto Migration { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name = "notifications", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name = "search", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto Search { get; set; }

        /// <summary>
        /// Gets or Sets Sidecar
        /// </summary>
        [DataMember(Name = "sidecar", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto Sidecar { get; set; }

        /// <summary>
        /// Gets or Sets SmartSearch
        /// </summary>
        [DataMember(Name = "smartSearch", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto SmartSearch { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailGeneration
        /// </summary>
        [DataMember(Name = "thumbnailGeneration", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto ThumbnailGeneration { get; set; }

        /// <summary>
        /// Gets or Sets VideoConversion
        /// </summary>
        [DataMember(Name = "videoConversion", IsRequired = true, EmitDefaultValue = true)]
        public JobSettingsDto VideoConversion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigJobDto {\n");
            sb.Append("  BackgroundTask: ").Append(BackgroundTask).Append("\n");
            sb.Append("  FaceDetection: ").Append(FaceDetection).Append("\n");
            sb.Append("  Library: ").Append(Library).Append("\n");
            sb.Append("  MetadataExtraction: ").Append(MetadataExtraction).Append("\n");
            sb.Append("  Migration: ").Append(Migration).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Sidecar: ").Append(Sidecar).Append("\n");
            sb.Append("  SmartSearch: ").Append(SmartSearch).Append("\n");
            sb.Append("  ThumbnailGeneration: ").Append(ThumbnailGeneration).Append("\n");
            sb.Append("  VideoConversion: ").Append(VideoConversion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

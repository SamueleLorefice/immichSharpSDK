/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SmartSearchDto
    /// </summary>
    [DataContract(Name = "SmartSearchDto")]
    public partial class SmartSearchDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public AssetTypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartSearchDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmartSearchDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartSearchDto" /> class.
        /// </summary>
        /// <param name="city">city.</param>
        /// <param name="country">country.</param>
        /// <param name="createdAfter">createdAfter.</param>
        /// <param name="createdBefore">createdBefore.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="isArchived">isArchived.</param>
        /// <param name="isEncoded">isEncoded.</param>
        /// <param name="isFavorite">isFavorite.</param>
        /// <param name="isMotion">isMotion.</param>
        /// <param name="isNotInAlbum">isNotInAlbum.</param>
        /// <param name="isOffline">isOffline.</param>
        /// <param name="isVisible">isVisible.</param>
        /// <param name="lensModel">lensModel.</param>
        /// <param name="libraryId">libraryId.</param>
        /// <param name="make">make.</param>
        /// <param name="model">model.</param>
        /// <param name="page">page.</param>
        /// <param name="personIds">personIds.</param>
        /// <param name="query">query (required).</param>
        /// <param name="size">size.</param>
        /// <param name="state">state.</param>
        /// <param name="takenAfter">takenAfter.</param>
        /// <param name="takenBefore">takenBefore.</param>
        /// <param name="trashedAfter">trashedAfter.</param>
        /// <param name="trashedBefore">trashedBefore.</param>
        /// <param name="type">type.</param>
        /// <param name="updatedAfter">updatedAfter.</param>
        /// <param name="updatedBefore">updatedBefore.</param>
        /// <param name="withArchived">withArchived (default to false).</param>
        /// <param name="withDeleted">withDeleted.</param>
        /// <param name="withExif">withExif.</param>
        public SmartSearchDto(string city = default(string), string country = default(string), DateTime createdAfter = default(DateTime), DateTime createdBefore = default(DateTime), string deviceId = default(string), bool isArchived = default(bool), bool isEncoded = default(bool), bool isFavorite = default(bool), bool isMotion = default(bool), bool isNotInAlbum = default(bool), bool isOffline = default(bool), bool isVisible = default(bool), string lensModel = default(string), Guid? libraryId = default(Guid?), string make = default(string), string model = default(string), decimal page = default(decimal), List<Guid> personIds = default(List<Guid>), string query = default(string), decimal size = default(decimal), string state = default(string), DateTime takenAfter = default(DateTime), DateTime takenBefore = default(DateTime), DateTime trashedAfter = default(DateTime), DateTime trashedBefore = default(DateTime), AssetTypeEnum? type = default(AssetTypeEnum?), DateTime updatedAfter = default(DateTime), DateTime updatedBefore = default(DateTime), bool withArchived = false, bool withDeleted = default(bool), bool withExif = default(bool))
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for SmartSearchDto and cannot be null");
            }
            this.Query = query;
            this.City = city;
            this.Country = country;
            this.CreatedAfter = createdAfter;
            this.CreatedBefore = createdBefore;
            this.DeviceId = deviceId;
            this.IsArchived = isArchived;
            this.IsEncoded = isEncoded;
            this.IsFavorite = isFavorite;
            this.IsMotion = isMotion;
            this.IsNotInAlbum = isNotInAlbum;
            this.IsOffline = isOffline;
            this.IsVisible = isVisible;
            this.LensModel = lensModel;
            this.LibraryId = libraryId;
            this.Make = make;
            this.Model = model;
            this.Page = page;
            this.PersonIds = personIds;
            this.Size = size;
            this.State = state;
            this.TakenAfter = takenAfter;
            this.TakenBefore = takenBefore;
            this.TrashedAfter = trashedAfter;
            this.TrashedBefore = trashedBefore;
            this.Type = type;
            this.UpdatedAfter = updatedAfter;
            this.UpdatedBefore = updatedBefore;
            this.WithArchived = withArchived;
            this.WithDeleted = withDeleted;
            this.WithExif = withExif;
        }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAfter
        /// </summary>
        [DataMember(Name = "createdAfter", EmitDefaultValue = false)]
        public DateTime CreatedAfter { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBefore
        /// </summary>
        [DataMember(Name = "createdBefore", EmitDefaultValue = false)]
        public DateTime CreatedBefore { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", EmitDefaultValue = false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets IsArchived
        /// </summary>
        [DataMember(Name = "isArchived", EmitDefaultValue = true)]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets or Sets IsEncoded
        /// </summary>
        [DataMember(Name = "isEncoded", EmitDefaultValue = true)]
        public bool IsEncoded { get; set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [DataMember(Name = "isFavorite", EmitDefaultValue = true)]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// Gets or Sets IsMotion
        /// </summary>
        [DataMember(Name = "isMotion", EmitDefaultValue = true)]
        public bool IsMotion { get; set; }

        /// <summary>
        /// Gets or Sets IsNotInAlbum
        /// </summary>
        [DataMember(Name = "isNotInAlbum", EmitDefaultValue = true)]
        public bool IsNotInAlbum { get; set; }

        /// <summary>
        /// Gets or Sets IsOffline
        /// </summary>
        [DataMember(Name = "isOffline", EmitDefaultValue = true)]
        public bool IsOffline { get; set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [DataMember(Name = "isVisible", EmitDefaultValue = true)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// Gets or Sets LensModel
        /// </summary>
        [DataMember(Name = "lensModel", EmitDefaultValue = false)]
        public string LensModel { get; set; }

        /// <summary>
        /// Gets or Sets LibraryId
        /// </summary>
        [DataMember(Name = "libraryId", EmitDefaultValue = true)]
        public Guid? LibraryId { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name = "make", EmitDefaultValue = false)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public decimal Page { get; set; }

        /// <summary>
        /// Gets or Sets PersonIds
        /// </summary>
        [DataMember(Name = "personIds", EmitDefaultValue = false)]
        public List<Guid> PersonIds { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public decimal Size { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets TakenAfter
        /// </summary>
        [DataMember(Name = "takenAfter", EmitDefaultValue = false)]
        public DateTime TakenAfter { get; set; }

        /// <summary>
        /// Gets or Sets TakenBefore
        /// </summary>
        [DataMember(Name = "takenBefore", EmitDefaultValue = false)]
        public DateTime TakenBefore { get; set; }

        /// <summary>
        /// Gets or Sets TrashedAfter
        /// </summary>
        [DataMember(Name = "trashedAfter", EmitDefaultValue = false)]
        public DateTime TrashedAfter { get; set; }

        /// <summary>
        /// Gets or Sets TrashedBefore
        /// </summary>
        [DataMember(Name = "trashedBefore", EmitDefaultValue = false)]
        public DateTime TrashedBefore { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAfter
        /// </summary>
        [DataMember(Name = "updatedAfter", EmitDefaultValue = false)]
        public DateTime UpdatedAfter { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBefore
        /// </summary>
        [DataMember(Name = "updatedBefore", EmitDefaultValue = false)]
        public DateTime UpdatedBefore { get; set; }

        /// <summary>
        /// Gets or Sets WithArchived
        /// </summary>
        [DataMember(Name = "withArchived", EmitDefaultValue = true)]
        public bool WithArchived { get; set; }

        /// <summary>
        /// Gets or Sets WithDeleted
        /// </summary>
        [DataMember(Name = "withDeleted", EmitDefaultValue = true)]
        public bool WithDeleted { get; set; }

        /// <summary>
        /// Gets or Sets WithExif
        /// </summary>
        [DataMember(Name = "withExif", EmitDefaultValue = true)]
        public bool WithExif { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmartSearchDto {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreatedAfter: ").Append(CreatedAfter).Append("\n");
            sb.Append("  CreatedBefore: ").Append(CreatedBefore).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsEncoded: ").Append(IsEncoded).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  IsMotion: ").Append(IsMotion).Append("\n");
            sb.Append("  IsNotInAlbum: ").Append(IsNotInAlbum).Append("\n");
            sb.Append("  IsOffline: ").Append(IsOffline).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  LensModel: ").Append(LensModel).Append("\n");
            sb.Append("  LibraryId: ").Append(LibraryId).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PersonIds: ").Append(PersonIds).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TakenAfter: ").Append(TakenAfter).Append("\n");
            sb.Append("  TakenBefore: ").Append(TakenBefore).Append("\n");
            sb.Append("  TrashedAfter: ").Append(TrashedAfter).Append("\n");
            sb.Append("  TrashedBefore: ").Append(TrashedBefore).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAfter: ").Append(UpdatedAfter).Append("\n");
            sb.Append("  UpdatedBefore: ").Append(UpdatedBefore).Append("\n");
            sb.Append("  WithArchived: ").Append(WithArchived).Append("\n");
            sb.Append("  WithDeleted: ").Append(WithDeleted).Append("\n");
            sb.Append("  WithExif: ").Append(WithExif).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Page (decimal) minimum
            if (this.Page < (decimal)1)
            {
                yield return new ValidationResult("Invalid value for Page, must be a value greater than or equal to 1.", new [] { "Page" });
            }

            // Size (decimal) maximum
            if (this.Size > (decimal)1000)
            {
                yield return new ValidationResult("Invalid value for Size, must be a value less than or equal to 1000.", new [] { "Size" });
            }

            // Size (decimal) minimum
            if (this.Size < (decimal)1)
            {
                yield return new ValidationResult("Invalid value for Size, must be a value greater than or equal to 1.", new [] { "Size" });
            }

            yield break;
        }
    }

}

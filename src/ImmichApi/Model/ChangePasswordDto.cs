/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// ChangePasswordDto
    /// </summary>
    [DataContract(Name = "ChangePasswordDto")]
    public partial class ChangePasswordDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangePasswordDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordDto" /> class.
        /// </summary>
        /// <param name="newPassword">newPassword (required).</param>
        /// <param name="password">password (required).</param>
        public ChangePasswordDto(string newPassword = default(string), string password = default(string))
        {
            // to ensure "newPassword" is required (not null)
            if (newPassword == null)
            {
                throw new ArgumentNullException("newPassword is a required property for ChangePasswordDto and cannot be null");
            }
            this.NewPassword = newPassword;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for ChangePasswordDto and cannot be null");
            }
            this.Password = password;
        }

        /// <summary>
        /// Gets or Sets NewPassword
        /// </summary>
        /// <example>password</example>
        [DataMember(Name = "newPassword", IsRequired = true, EmitDefaultValue = true)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        /// <example>password</example>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangePasswordDto {\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NewPassword (string) minLength
            if (this.NewPassword != null && this.NewPassword.Length < 8)
            {
                yield return new ValidationResult("Invalid value for NewPassword, length must be greater than 8.", new [] { "NewPassword" });
            }

            yield break;
        }
    }

}

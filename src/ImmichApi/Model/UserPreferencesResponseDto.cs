/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// UserPreferencesResponseDto
    /// </summary>
    [DataContract(Name = "UserPreferencesResponseDto")]
    public partial class UserPreferencesResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreferencesResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserPreferencesResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPreferencesResponseDto" /> class.
        /// </summary>
        /// <param name="avatar">avatar (required).</param>
        /// <param name="download">download (required).</param>
        /// <param name="emailNotifications">emailNotifications (required).</param>
        /// <param name="memories">memories (required).</param>
        /// <param name="purchase">purchase (required).</param>
        public UserPreferencesResponseDto(AvatarResponse avatar = default(AvatarResponse), DownloadResponse download = default(DownloadResponse), EmailNotificationsResponse emailNotifications = default(EmailNotificationsResponse), MemoryResponse memories = default(MemoryResponse), PurchaseResponse purchase = default(PurchaseResponse))
        {
            // to ensure "avatar" is required (not null)
            if (avatar == null)
            {
                throw new ArgumentNullException("avatar is a required property for UserPreferencesResponseDto and cannot be null");
            }
            this.Avatar = avatar;
            // to ensure "download" is required (not null)
            if (download == null)
            {
                throw new ArgumentNullException("download is a required property for UserPreferencesResponseDto and cannot be null");
            }
            this.Download = download;
            // to ensure "emailNotifications" is required (not null)
            if (emailNotifications == null)
            {
                throw new ArgumentNullException("emailNotifications is a required property for UserPreferencesResponseDto and cannot be null");
            }
            this.EmailNotifications = emailNotifications;
            // to ensure "memories" is required (not null)
            if (memories == null)
            {
                throw new ArgumentNullException("memories is a required property for UserPreferencesResponseDto and cannot be null");
            }
            this.Memories = memories;
            // to ensure "purchase" is required (not null)
            if (purchase == null)
            {
                throw new ArgumentNullException("purchase is a required property for UserPreferencesResponseDto and cannot be null");
            }
            this.Purchase = purchase;
        }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name = "avatar", IsRequired = true, EmitDefaultValue = true)]
        public AvatarResponse Avatar { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [DataMember(Name = "download", IsRequired = true, EmitDefaultValue = true)]
        public DownloadResponse Download { get; set; }

        /// <summary>
        /// Gets or Sets EmailNotifications
        /// </summary>
        [DataMember(Name = "emailNotifications", IsRequired = true, EmitDefaultValue = true)]
        public EmailNotificationsResponse EmailNotifications { get; set; }

        /// <summary>
        /// Gets or Sets Memories
        /// </summary>
        [DataMember(Name = "memories", IsRequired = true, EmitDefaultValue = true)]
        public MemoryResponse Memories { get; set; }

        /// <summary>
        /// Gets or Sets Purchase
        /// </summary>
        [DataMember(Name = "purchase", IsRequired = true, EmitDefaultValue = true)]
        public PurchaseResponse Purchase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPreferencesResponseDto {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  EmailNotifications: ").Append(EmailNotifications).Append("\n");
            sb.Append("  Memories: ").Append(Memories).Append("\n");
            sb.Append("  Purchase: ").Append(Purchase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// AssetIdsResponseDto
    /// </summary>
    [DataContract(Name = "AssetIdsResponseDto")]
    public partial class AssetIdsResponseDto : IValidatableObject
    {
        /// <summary>
        /// Defines Error
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorEnum
        {
            /// <summary>
            /// Enum Duplicate for value: duplicate
            /// </summary>
            [EnumMember(Value = "duplicate")]
            Duplicate = 1,

            /// <summary>
            /// Enum NoPermission for value: no_permission
            /// </summary>
            [EnumMember(Value = "no_permission")]
            NoPermission = 2,

            /// <summary>
            /// Enum NotFound for value: not_found
            /// </summary>
            [EnumMember(Value = "not_found")]
            NotFound = 3
        }


        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public ErrorEnum? Error { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetIdsResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetIdsResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetIdsResponseDto" /> class.
        /// </summary>
        /// <param name="assetId">assetId (required).</param>
        /// <param name="error">error.</param>
        /// <param name="success">success (required).</param>
        public AssetIdsResponseDto(string assetId = default(string), ErrorEnum? error = default(ErrorEnum?), bool success = default(bool))
        {
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new ArgumentNullException("assetId is a required property for AssetIdsResponseDto and cannot be null");
            }
            this.AssetId = assetId;
            this.Success = success;
            this.Error = error;
        }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetIdsResponseDto {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

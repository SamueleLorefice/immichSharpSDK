/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// LibraryResponseDto
    /// </summary>
    [DataContract(Name = "LibraryResponseDto")]
    public partial class LibraryResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LibraryResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryResponseDto" /> class.
        /// </summary>
        /// <param name="assetCount">assetCount (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="exclusionPatterns">exclusionPatterns (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="importPaths">importPaths (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="ownerId">ownerId (required).</param>
        /// <param name="refreshedAt">refreshedAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public LibraryResponseDto(int assetCount = default(int), DateTime createdAt = default(DateTime), List<string> exclusionPatterns = default(List<string>), string id = default(string), List<string> importPaths = default(List<string>), string name = default(string), string ownerId = default(string), DateTime? refreshedAt = default(DateTime?), DateTime updatedAt = default(DateTime))
        {
            this.AssetCount = assetCount;
            this.CreatedAt = createdAt;
            // to ensure "exclusionPatterns" is required (not null)
            if (exclusionPatterns == null)
            {
                throw new ArgumentNullException("exclusionPatterns is a required property for LibraryResponseDto and cannot be null");
            }
            this.ExclusionPatterns = exclusionPatterns;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for LibraryResponseDto and cannot be null");
            }
            this.Id = id;
            // to ensure "importPaths" is required (not null)
            if (importPaths == null)
            {
                throw new ArgumentNullException("importPaths is a required property for LibraryResponseDto and cannot be null");
            }
            this.ImportPaths = importPaths;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LibraryResponseDto and cannot be null");
            }
            this.Name = name;
            // to ensure "ownerId" is required (not null)
            if (ownerId == null)
            {
                throw new ArgumentNullException("ownerId is a required property for LibraryResponseDto and cannot be null");
            }
            this.OwnerId = ownerId;
            // to ensure "refreshedAt" is required (not null)
            if (refreshedAt == null)
            {
                throw new ArgumentNullException("refreshedAt is a required property for LibraryResponseDto and cannot be null");
            }
            this.RefreshedAt = refreshedAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets AssetCount
        /// </summary>
        [DataMember(Name = "assetCount", IsRequired = true, EmitDefaultValue = true)]
        public int AssetCount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionPatterns
        /// </summary>
        [DataMember(Name = "exclusionPatterns", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ExclusionPatterns { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImportPaths
        /// </summary>
        [DataMember(Name = "importPaths", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ImportPaths { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "ownerId", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets RefreshedAt
        /// </summary>
        [DataMember(Name = "refreshedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? RefreshedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibraryResponseDto {\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExclusionPatterns: ").Append(ExclusionPatterns).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportPaths: ").Append(ImportPaths).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  RefreshedAt: ").Append(RefreshedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

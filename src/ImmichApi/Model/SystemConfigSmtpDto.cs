/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SystemConfigSmtpDto
    /// </summary>
    [DataContract(Name = "SystemConfigSmtpDto")]
    public partial class SystemConfigSmtpDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigSmtpDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfigSmtpDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigSmtpDto" /> class.
        /// </summary>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="replyTo">replyTo (required).</param>
        /// <param name="transport">transport (required).</param>
        public SystemConfigSmtpDto(bool enabled = default(bool), string from = default(string), string replyTo = default(string), SystemConfigSmtpTransportDto transport = default(SystemConfigSmtpTransportDto))
        {
            this.Enabled = enabled;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for SystemConfigSmtpDto and cannot be null");
            }
            this.From = from;
            // to ensure "replyTo" is required (not null)
            if (replyTo == null)
            {
                throw new ArgumentNullException("replyTo is a required property for SystemConfigSmtpDto and cannot be null");
            }
            this.ReplyTo = replyTo;
            // to ensure "transport" is required (not null)
            if (transport == null)
            {
                throw new ArgumentNullException("transport is a required property for SystemConfigSmtpDto and cannot be null");
            }
            this.Transport = transport;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>
        [DataMember(Name = "replyTo", IsRequired = true, EmitDefaultValue = true)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets Transport
        /// </summary>
        [DataMember(Name = "transport", IsRequired = true, EmitDefaultValue = true)]
        public SystemConfigSmtpTransportDto Transport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigSmtpDto {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// UserAdminCreateDto
    /// </summary>
    [DataContract(Name = "UserAdminCreateDto")]
    public partial class UserAdminCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAdminCreateDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAdminCreateDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAdminCreateDto" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="notify">notify.</param>
        /// <param name="password">password (required).</param>
        /// <param name="quotaSizeInBytes">quotaSizeInBytes.</param>
        /// <param name="shouldChangePassword">shouldChangePassword.</param>
        /// <param name="storageLabel">storageLabel.</param>
        public UserAdminCreateDto(string email = default(string), string name = default(string), bool notify = default(bool), string password = default(string), long? quotaSizeInBytes = default(long?), bool shouldChangePassword = default(bool), string storageLabel = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for UserAdminCreateDto and cannot be null");
            }
            this.Email = email;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UserAdminCreateDto and cannot be null");
            }
            this.Name = name;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for UserAdminCreateDto and cannot be null");
            }
            this.Password = password;
            this.Notify = notify;
            this.QuotaSizeInBytes = quotaSizeInBytes;
            this.ShouldChangePassword = shouldChangePassword;
            this.StorageLabel = storageLabel;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Notify
        /// </summary>
        [DataMember(Name = "notify", EmitDefaultValue = true)]
        public bool Notify { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets QuotaSizeInBytes
        /// </summary>
        [DataMember(Name = "quotaSizeInBytes", EmitDefaultValue = true)]
        public long? QuotaSizeInBytes { get; set; }

        /// <summary>
        /// Gets or Sets ShouldChangePassword
        /// </summary>
        [DataMember(Name = "shouldChangePassword", EmitDefaultValue = true)]
        public bool ShouldChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets StorageLabel
        /// </summary>
        [DataMember(Name = "storageLabel", EmitDefaultValue = true)]
        public string StorageLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAdminCreateDto {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  QuotaSizeInBytes: ").Append(QuotaSizeInBytes).Append("\n");
            sb.Append("  ShouldChangePassword: ").Append(ShouldChangePassword).Append("\n");
            sb.Append("  StorageLabel: ").Append(StorageLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuotaSizeInBytes (long?) minimum
            if (this.QuotaSizeInBytes < (long?)1)
            {
                yield return new ValidationResult("Invalid value for QuotaSizeInBytes, must be a value greater than or equal to 1.", new [] { "QuotaSizeInBytes" });
            }

            yield break;
        }
    }

}

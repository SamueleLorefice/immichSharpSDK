/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SessionResponseDto
    /// </summary>
    [DataContract(Name = "SessionResponseDto")]
    public partial class SessionResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SessionResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionResponseDto" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="current">current (required).</param>
        /// <param name="deviceOS">deviceOS (required).</param>
        /// <param name="deviceType">deviceType (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public SessionResponseDto(string createdAt = default(string), bool current = default(bool), string deviceOS = default(string), string deviceType = default(string), string id = default(string), string updatedAt = default(string))
        {
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for SessionResponseDto and cannot be null");
            }
            this.CreatedAt = createdAt;
            this.Current = current;
            // to ensure "deviceOS" is required (not null)
            if (deviceOS == null)
            {
                throw new ArgumentNullException("deviceOS is a required property for SessionResponseDto and cannot be null");
            }
            this.DeviceOS = deviceOS;
            // to ensure "deviceType" is required (not null)
            if (deviceType == null)
            {
                throw new ArgumentNullException("deviceType is a required property for SessionResponseDto and cannot be null");
            }
            this.DeviceType = deviceType;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SessionResponseDto and cannot be null");
            }
            this.Id = id;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for SessionResponseDto and cannot be null");
            }
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", IsRequired = true, EmitDefaultValue = true)]
        public bool Current { get; set; }

        /// <summary>
        /// Gets or Sets DeviceOS
        /// </summary>
        [DataMember(Name = "deviceOS", IsRequired = true, EmitDefaultValue = true)]
        public string DeviceOS { get; set; }

        /// <summary>
        /// Gets or Sets DeviceType
        /// </summary>
        [DataMember(Name = "deviceType", IsRequired = true, EmitDefaultValue = true)]
        public string DeviceType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionResponseDto {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  DeviceOS: ").Append(DeviceOS).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

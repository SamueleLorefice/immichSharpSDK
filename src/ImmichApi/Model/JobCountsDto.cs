/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// JobCountsDto
    /// </summary>
    [DataContract(Name = "JobCountsDto")]
    public partial class JobCountsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobCountsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JobCountsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobCountsDto" /> class.
        /// </summary>
        /// <param name="active">active (required).</param>
        /// <param name="completed">completed (required).</param>
        /// <param name="delayed">delayed (required).</param>
        /// <param name="failed">failed (required).</param>
        /// <param name="paused">paused (required).</param>
        /// <param name="waiting">waiting (required).</param>
        public JobCountsDto(int active = default(int), int completed = default(int), int delayed = default(int), int failed = default(int), int paused = default(int), int waiting = default(int))
        {
            this.Active = active;
            this.Completed = completed;
            this.Delayed = delayed;
            this.Failed = failed;
            this.Paused = paused;
            this.Waiting = waiting;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public int Active { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "completed", IsRequired = true, EmitDefaultValue = true)]
        public int Completed { get; set; }

        /// <summary>
        /// Gets or Sets Delayed
        /// </summary>
        [DataMember(Name = "delayed", IsRequired = true, EmitDefaultValue = true)]
        public int Delayed { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name = "failed", IsRequired = true, EmitDefaultValue = true)]
        public int Failed { get; set; }

        /// <summary>
        /// Gets or Sets Paused
        /// </summary>
        [DataMember(Name = "paused", IsRequired = true, EmitDefaultValue = true)]
        public int Paused { get; set; }

        /// <summary>
        /// Gets or Sets Waiting
        /// </summary>
        [DataMember(Name = "waiting", IsRequired = true, EmitDefaultValue = true)]
        public int Waiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobCountsDto {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Delayed: ").Append(Delayed).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  Waiting: ").Append(Waiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// FileReportItemDto
    /// </summary>
    [DataContract(Name = "FileReportItemDto")]
    public partial class FileReportItemDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public PathEntityType EntityType { get; set; }

        /// <summary>
        /// Gets or Sets PathType
        /// </summary>
        [DataMember(Name = "pathType", IsRequired = true, EmitDefaultValue = true)]
        public PathType PathType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileReportItemDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileReportItemDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileReportItemDto" /> class.
        /// </summary>
        /// <param name="checksum">checksum.</param>
        /// <param name="entityId">entityId (required).</param>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="pathType">pathType (required).</param>
        /// <param name="pathValue">pathValue (required).</param>
        public FileReportItemDto(string checksum = default(string), Guid entityId = default(Guid), PathEntityType entityType = default(PathEntityType), PathType pathType = default(PathType), string pathValue = default(string))
        {
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.PathType = pathType;
            // to ensure "pathValue" is required (not null)
            if (pathValue == null)
            {
                throw new ArgumentNullException("pathValue is a required property for FileReportItemDto and cannot be null");
            }
            this.PathValue = pathValue;
            this.Checksum = checksum;
        }

        /// <summary>
        /// Gets or Sets Checksum
        /// </summary>
        [DataMember(Name = "checksum", EmitDefaultValue = false)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = true)]
        public Guid EntityId { get; set; }

        /// <summary>
        /// Gets or Sets PathValue
        /// </summary>
        [DataMember(Name = "pathValue", IsRequired = true, EmitDefaultValue = true)]
        public string PathValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileReportItemDto {\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  PathType: ").Append(PathType).Append("\n");
            sb.Append("  PathValue: ").Append(PathValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

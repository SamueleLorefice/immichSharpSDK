/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// CheckExistingAssetsDto
    /// </summary>
    [DataContract(Name = "CheckExistingAssetsDto")]
    public partial class CheckExistingAssetsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckExistingAssetsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckExistingAssetsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckExistingAssetsDto" /> class.
        /// </summary>
        /// <param name="deviceAssetIds">deviceAssetIds (required).</param>
        /// <param name="deviceId">deviceId (required).</param>
        public CheckExistingAssetsDto(List<string> deviceAssetIds = default(List<string>), string deviceId = default(string))
        {
            // to ensure "deviceAssetIds" is required (not null)
            if (deviceAssetIds == null)
            {
                throw new ArgumentNullException("deviceAssetIds is a required property for CheckExistingAssetsDto and cannot be null");
            }
            this.DeviceAssetIds = deviceAssetIds;
            // to ensure "deviceId" is required (not null)
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId is a required property for CheckExistingAssetsDto and cannot be null");
            }
            this.DeviceId = deviceId;
        }

        /// <summary>
        /// Gets or Sets DeviceAssetIds
        /// </summary>
        [DataMember(Name = "deviceAssetIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> DeviceAssetIds { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", IsRequired = true, EmitDefaultValue = true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckExistingAssetsDto {\n");
            sb.Append("  DeviceAssetIds: ").Append(DeviceAssetIds).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

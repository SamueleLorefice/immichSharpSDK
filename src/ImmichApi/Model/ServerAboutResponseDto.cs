/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// ServerAboutResponseDto
    /// </summary>
    [DataContract(Name = "ServerAboutResponseDto")]
    public partial class ServerAboutResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerAboutResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServerAboutResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerAboutResponseDto" /> class.
        /// </summary>
        /// <param name="build">build.</param>
        /// <param name="buildImage">buildImage.</param>
        /// <param name="buildImageUrl">buildImageUrl.</param>
        /// <param name="buildUrl">buildUrl.</param>
        /// <param name="exiftool">exiftool.</param>
        /// <param name="ffmpeg">ffmpeg.</param>
        /// <param name="imagemagick">imagemagick.</param>
        /// <param name="libvips">libvips.</param>
        /// <param name="licensed">licensed (required).</param>
        /// <param name="nodejs">nodejs.</param>
        /// <param name="repository">repository.</param>
        /// <param name="repositoryUrl">repositoryUrl.</param>
        /// <param name="sourceCommit">sourceCommit.</param>
        /// <param name="sourceRef">sourceRef.</param>
        /// <param name="sourceUrl">sourceUrl.</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="versionUrl">versionUrl (required).</param>
        public ServerAboutResponseDto(string build = default(string), string buildImage = default(string), string buildImageUrl = default(string), string buildUrl = default(string), string exiftool = default(string), string ffmpeg = default(string), string imagemagick = default(string), string libvips = default(string), bool licensed = default(bool), string nodejs = default(string), string repository = default(string), string repositoryUrl = default(string), string sourceCommit = default(string), string sourceRef = default(string), string sourceUrl = default(string), string varVersion = default(string), string versionUrl = default(string))
        {
            this.Licensed = licensed;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for ServerAboutResponseDto and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "versionUrl" is required (not null)
            if (versionUrl == null)
            {
                throw new ArgumentNullException("versionUrl is a required property for ServerAboutResponseDto and cannot be null");
            }
            this.VersionUrl = versionUrl;
            this.Build = build;
            this.BuildImage = buildImage;
            this.BuildImageUrl = buildImageUrl;
            this.BuildUrl = buildUrl;
            this.Exiftool = exiftool;
            this.Ffmpeg = ffmpeg;
            this.Imagemagick = imagemagick;
            this.Libvips = libvips;
            this.Nodejs = nodejs;
            this.Repository = repository;
            this.RepositoryUrl = repositoryUrl;
            this.SourceCommit = sourceCommit;
            this.SourceRef = sourceRef;
            this.SourceUrl = sourceUrl;
        }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name = "build", EmitDefaultValue = false)]
        public string Build { get; set; }

        /// <summary>
        /// Gets or Sets BuildImage
        /// </summary>
        [DataMember(Name = "buildImage", EmitDefaultValue = false)]
        public string BuildImage { get; set; }

        /// <summary>
        /// Gets or Sets BuildImageUrl
        /// </summary>
        [DataMember(Name = "buildImageUrl", EmitDefaultValue = false)]
        public string BuildImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets BuildUrl
        /// </summary>
        [DataMember(Name = "buildUrl", EmitDefaultValue = false)]
        public string BuildUrl { get; set; }

        /// <summary>
        /// Gets or Sets Exiftool
        /// </summary>
        [DataMember(Name = "exiftool", EmitDefaultValue = false)]
        public string Exiftool { get; set; }

        /// <summary>
        /// Gets or Sets Ffmpeg
        /// </summary>
        [DataMember(Name = "ffmpeg", EmitDefaultValue = false)]
        public string Ffmpeg { get; set; }

        /// <summary>
        /// Gets or Sets Imagemagick
        /// </summary>
        [DataMember(Name = "imagemagick", EmitDefaultValue = false)]
        public string Imagemagick { get; set; }

        /// <summary>
        /// Gets or Sets Libvips
        /// </summary>
        [DataMember(Name = "libvips", EmitDefaultValue = false)]
        public string Libvips { get; set; }

        /// <summary>
        /// Gets or Sets Licensed
        /// </summary>
        [DataMember(Name = "licensed", IsRequired = true, EmitDefaultValue = true)]
        public bool Licensed { get; set; }

        /// <summary>
        /// Gets or Sets Nodejs
        /// </summary>
        [DataMember(Name = "nodejs", EmitDefaultValue = false)]
        public string Nodejs { get; set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [DataMember(Name = "repository", EmitDefaultValue = false)]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryUrl
        /// </summary>
        [DataMember(Name = "repositoryUrl", EmitDefaultValue = false)]
        public string RepositoryUrl { get; set; }

        /// <summary>
        /// Gets or Sets SourceCommit
        /// </summary>
        [DataMember(Name = "sourceCommit", EmitDefaultValue = false)]
        public string SourceCommit { get; set; }

        /// <summary>
        /// Gets or Sets SourceRef
        /// </summary>
        [DataMember(Name = "sourceRef", EmitDefaultValue = false)]
        public string SourceRef { get; set; }

        /// <summary>
        /// Gets or Sets SourceUrl
        /// </summary>
        [DataMember(Name = "sourceUrl", EmitDefaultValue = false)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets VersionUrl
        /// </summary>
        [DataMember(Name = "versionUrl", IsRequired = true, EmitDefaultValue = true)]
        public string VersionUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerAboutResponseDto {\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  BuildImage: ").Append(BuildImage).Append("\n");
            sb.Append("  BuildImageUrl: ").Append(BuildImageUrl).Append("\n");
            sb.Append("  BuildUrl: ").Append(BuildUrl).Append("\n");
            sb.Append("  Exiftool: ").Append(Exiftool).Append("\n");
            sb.Append("  Ffmpeg: ").Append(Ffmpeg).Append("\n");
            sb.Append("  Imagemagick: ").Append(Imagemagick).Append("\n");
            sb.Append("  Libvips: ").Append(Libvips).Append("\n");
            sb.Append("  Licensed: ").Append(Licensed).Append("\n");
            sb.Append("  Nodejs: ").Append(Nodejs).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  RepositoryUrl: ").Append(RepositoryUrl).Append("\n");
            sb.Append("  SourceCommit: ").Append(SourceCommit).Append("\n");
            sb.Append("  SourceRef: ").Append(SourceRef).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  VersionUrl: ").Append(VersionUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

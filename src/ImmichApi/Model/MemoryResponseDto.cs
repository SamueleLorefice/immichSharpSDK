/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// MemoryResponseDto
    /// </summary>
    [DataContract(Name = "MemoryResponseDto")]
    public partial class MemoryResponseDto : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum OnThisDay for value: on_this_day
            /// </summary>
            [EnumMember(Value = "on_this_day")]
            OnThisDay = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MemoryResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryResponseDto" /> class.
        /// </summary>
        /// <param name="assets">assets (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="data">data (required).</param>
        /// <param name="deletedAt">deletedAt.</param>
        /// <param name="id">id (required).</param>
        /// <param name="isSaved">isSaved (required).</param>
        /// <param name="memoryAt">memoryAt (required).</param>
        /// <param name="ownerId">ownerId (required).</param>
        /// <param name="seenAt">seenAt.</param>
        /// <param name="type">type (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public MemoryResponseDto(List<AssetResponseDto> assets = default(List<AssetResponseDto>), DateTime createdAt = default(DateTime), OnThisDayDto data = default(OnThisDayDto), DateTime deletedAt = default(DateTime), string id = default(string), bool isSaved = default(bool), DateTime memoryAt = default(DateTime), string ownerId = default(string), DateTime seenAt = default(DateTime), TypeEnum type = default(TypeEnum), DateTime updatedAt = default(DateTime))
        {
            // to ensure "assets" is required (not null)
            if (assets == null)
            {
                throw new ArgumentNullException("assets is a required property for MemoryResponseDto and cannot be null");
            }
            this.Assets = assets;
            this.CreatedAt = createdAt;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for MemoryResponseDto and cannot be null");
            }
            this.Data = data;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MemoryResponseDto and cannot be null");
            }
            this.Id = id;
            this.IsSaved = isSaved;
            this.MemoryAt = memoryAt;
            // to ensure "ownerId" is required (not null)
            if (ownerId == null)
            {
                throw new ArgumentNullException("ownerId is a required property for MemoryResponseDto and cannot be null");
            }
            this.OwnerId = ownerId;
            this.Type = type;
            this.UpdatedAt = updatedAt;
            this.DeletedAt = deletedAt;
            this.SeenAt = seenAt;
        }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", IsRequired = true, EmitDefaultValue = true)]
        public List<AssetResponseDto> Assets { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public OnThisDayDto Data { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsSaved
        /// </summary>
        [DataMember(Name = "isSaved", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSaved { get; set; }

        /// <summary>
        /// Gets or Sets MemoryAt
        /// </summary>
        [DataMember(Name = "memoryAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime MemoryAt { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "ownerId", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets SeenAt
        /// </summary>
        [DataMember(Name = "seenAt", EmitDefaultValue = false)]
        public DateTime SeenAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemoryResponseDto {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSaved: ").Append(IsSaved).Append("\n");
            sb.Append("  MemoryAt: ").Append(MemoryAt).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  SeenAt: ").Append(SeenAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// UsageByUserDto
    /// </summary>
    [DataContract(Name = "UsageByUserDto")]
    public partial class UsageByUserDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageByUserDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UsageByUserDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageByUserDto" /> class.
        /// </summary>
        /// <param name="photos">photos (required).</param>
        /// <param name="quotaSizeInBytes">quotaSizeInBytes (required).</param>
        /// <param name="usage">usage (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="userName">userName (required).</param>
        /// <param name="videos">videos (required).</param>
        public UsageByUserDto(int photos = default(int), long? quotaSizeInBytes = default(long?), long usage = default(long), string userId = default(string), string userName = default(string), int videos = default(int))
        {
            this.Photos = photos;
            // to ensure "quotaSizeInBytes" is required (not null)
            if (quotaSizeInBytes == null)
            {
                throw new ArgumentNullException("quotaSizeInBytes is a required property for UsageByUserDto and cannot be null");
            }
            this.QuotaSizeInBytes = quotaSizeInBytes;
            this.Usage = usage;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for UsageByUserDto and cannot be null");
            }
            this.UserId = userId;
            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new ArgumentNullException("userName is a required property for UsageByUserDto and cannot be null");
            }
            this.UserName = userName;
            this.Videos = videos;
        }

        /// <summary>
        /// Gets or Sets Photos
        /// </summary>
        [DataMember(Name = "photos", IsRequired = true, EmitDefaultValue = true)]
        public int Photos { get; set; }

        /// <summary>
        /// Gets or Sets QuotaSizeInBytes
        /// </summary>
        [DataMember(Name = "quotaSizeInBytes", IsRequired = true, EmitDefaultValue = true)]
        public long? QuotaSizeInBytes { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", IsRequired = true, EmitDefaultValue = true)]
        public long Usage { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", IsRequired = true, EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [DataMember(Name = "videos", IsRequired = true, EmitDefaultValue = true)]
        public int Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsageByUserDto {\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  QuotaSizeInBytes: ").Append(QuotaSizeInBytes).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

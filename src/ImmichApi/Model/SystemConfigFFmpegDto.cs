/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SystemConfigFFmpegDto
    /// </summary>
    [DataContract(Name = "SystemConfigFFmpegDto")]
    public partial class SystemConfigFFmpegDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Accel
        /// </summary>
        [DataMember(Name = "accel", IsRequired = true, EmitDefaultValue = true)]
        public TranscodeHWAccel Accel { get; set; }

        /// <summary>
        /// Gets or Sets CqMode
        /// </summary>
        [DataMember(Name = "cqMode", IsRequired = true, EmitDefaultValue = true)]
        public CQMode CqMode { get; set; }

        /// <summary>
        /// Gets or Sets TargetAudioCodec
        /// </summary>
        [DataMember(Name = "targetAudioCodec", IsRequired = true, EmitDefaultValue = true)]
        public AudioCodec TargetAudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets TargetVideoCodec
        /// </summary>
        [DataMember(Name = "targetVideoCodec", IsRequired = true, EmitDefaultValue = true)]
        public VideoCodec TargetVideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets Tonemap
        /// </summary>
        [DataMember(Name = "tonemap", IsRequired = true, EmitDefaultValue = true)]
        public ToneMapping Tonemap { get; set; }

        /// <summary>
        /// Gets or Sets Transcode
        /// </summary>
        [DataMember(Name = "transcode", IsRequired = true, EmitDefaultValue = true)]
        public TranscodePolicy Transcode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigFFmpegDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfigFFmpegDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigFFmpegDto" /> class.
        /// </summary>
        /// <param name="accel">accel (required).</param>
        /// <param name="accelDecode">accelDecode (required).</param>
        /// <param name="acceptedAudioCodecs">acceptedAudioCodecs (required).</param>
        /// <param name="acceptedContainers">acceptedContainers (required).</param>
        /// <param name="acceptedVideoCodecs">acceptedVideoCodecs (required).</param>
        /// <param name="bframes">bframes (required).</param>
        /// <param name="cqMode">cqMode (required).</param>
        /// <param name="crf">crf (required).</param>
        /// <param name="gopSize">gopSize (required).</param>
        /// <param name="maxBitrate">maxBitrate (required).</param>
        /// <param name="npl">npl (required).</param>
        /// <param name="preferredHwDevice">preferredHwDevice (required).</param>
        /// <param name="preset">preset (required).</param>
        /// <param name="refs">refs (required).</param>
        /// <param name="targetAudioCodec">targetAudioCodec (required).</param>
        /// <param name="targetResolution">targetResolution (required).</param>
        /// <param name="targetVideoCodec">targetVideoCodec (required).</param>
        /// <param name="temporalAQ">temporalAQ (required).</param>
        /// <param name="threads">threads (required).</param>
        /// <param name="tonemap">tonemap (required).</param>
        /// <param name="transcode">transcode (required).</param>
        /// <param name="twoPass">twoPass (required).</param>
        public SystemConfigFFmpegDto(TranscodeHWAccel accel = default(TranscodeHWAccel), bool accelDecode = default(bool), List<AudioCodec> acceptedAudioCodecs = default(List<AudioCodec>), List<VideoContainer> acceptedContainers = default(List<VideoContainer>), List<VideoCodec> acceptedVideoCodecs = default(List<VideoCodec>), int bframes = default(int), CQMode cqMode = default(CQMode), int crf = default(int), int gopSize = default(int), string maxBitrate = default(string), int npl = default(int), string preferredHwDevice = default(string), string preset = default(string), int refs = default(int), AudioCodec targetAudioCodec = default(AudioCodec), string targetResolution = default(string), VideoCodec targetVideoCodec = default(VideoCodec), bool temporalAQ = default(bool), int threads = default(int), ToneMapping tonemap = default(ToneMapping), TranscodePolicy transcode = default(TranscodePolicy), bool twoPass = default(bool))
        {
            this.Accel = accel;
            this.AccelDecode = accelDecode;
            // to ensure "acceptedAudioCodecs" is required (not null)
            if (acceptedAudioCodecs == null)
            {
                throw new ArgumentNullException("acceptedAudioCodecs is a required property for SystemConfigFFmpegDto and cannot be null");
            }
            this.AcceptedAudioCodecs = acceptedAudioCodecs;
            // to ensure "acceptedContainers" is required (not null)
            if (acceptedContainers == null)
            {
                throw new ArgumentNullException("acceptedContainers is a required property for SystemConfigFFmpegDto and cannot be null");
            }
            this.AcceptedContainers = acceptedContainers;
            // to ensure "acceptedVideoCodecs" is required (not null)
            if (acceptedVideoCodecs == null)
            {
                throw new ArgumentNullException("acceptedVideoCodecs is a required property for SystemConfigFFmpegDto and cannot be null");
            }
            this.AcceptedVideoCodecs = acceptedVideoCodecs;
            this.Bframes = bframes;
            this.CqMode = cqMode;
            this.Crf = crf;
            this.GopSize = gopSize;
            // to ensure "maxBitrate" is required (not null)
            if (maxBitrate == null)
            {
                throw new ArgumentNullException("maxBitrate is a required property for SystemConfigFFmpegDto and cannot be null");
            }
            this.MaxBitrate = maxBitrate;
            this.Npl = npl;
            // to ensure "preferredHwDevice" is required (not null)
            if (preferredHwDevice == null)
            {
                throw new ArgumentNullException("preferredHwDevice is a required property for SystemConfigFFmpegDto and cannot be null");
            }
            this.PreferredHwDevice = preferredHwDevice;
            // to ensure "preset" is required (not null)
            if (preset == null)
            {
                throw new ArgumentNullException("preset is a required property for SystemConfigFFmpegDto and cannot be null");
            }
            this.Preset = preset;
            this.Refs = refs;
            this.TargetAudioCodec = targetAudioCodec;
            // to ensure "targetResolution" is required (not null)
            if (targetResolution == null)
            {
                throw new ArgumentNullException("targetResolution is a required property for SystemConfigFFmpegDto and cannot be null");
            }
            this.TargetResolution = targetResolution;
            this.TargetVideoCodec = targetVideoCodec;
            this.TemporalAQ = temporalAQ;
            this.Threads = threads;
            this.Tonemap = tonemap;
            this.Transcode = transcode;
            this.TwoPass = twoPass;
        }

        /// <summary>
        /// Gets or Sets AccelDecode
        /// </summary>
        [DataMember(Name = "accelDecode", IsRequired = true, EmitDefaultValue = true)]
        public bool AccelDecode { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedAudioCodecs
        /// </summary>
        [DataMember(Name = "acceptedAudioCodecs", IsRequired = true, EmitDefaultValue = true)]
        public List<AudioCodec> AcceptedAudioCodecs { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedContainers
        /// </summary>
        [DataMember(Name = "acceptedContainers", IsRequired = true, EmitDefaultValue = true)]
        public List<VideoContainer> AcceptedContainers { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedVideoCodecs
        /// </summary>
        [DataMember(Name = "acceptedVideoCodecs", IsRequired = true, EmitDefaultValue = true)]
        public List<VideoCodec> AcceptedVideoCodecs { get; set; }

        /// <summary>
        /// Gets or Sets Bframes
        /// </summary>
        [DataMember(Name = "bframes", IsRequired = true, EmitDefaultValue = true)]
        public int Bframes { get; set; }

        /// <summary>
        /// Gets or Sets Crf
        /// </summary>
        [DataMember(Name = "crf", IsRequired = true, EmitDefaultValue = true)]
        public int Crf { get; set; }

        /// <summary>
        /// Gets or Sets GopSize
        /// </summary>
        [DataMember(Name = "gopSize", IsRequired = true, EmitDefaultValue = true)]
        public int GopSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxBitrate
        /// </summary>
        [DataMember(Name = "maxBitrate", IsRequired = true, EmitDefaultValue = true)]
        public string MaxBitrate { get; set; }

        /// <summary>
        /// Gets or Sets Npl
        /// </summary>
        [DataMember(Name = "npl", IsRequired = true, EmitDefaultValue = true)]
        public int Npl { get; set; }

        /// <summary>
        /// Gets or Sets PreferredHwDevice
        /// </summary>
        [DataMember(Name = "preferredHwDevice", IsRequired = true, EmitDefaultValue = true)]
        public string PreferredHwDevice { get; set; }

        /// <summary>
        /// Gets or Sets Preset
        /// </summary>
        [DataMember(Name = "preset", IsRequired = true, EmitDefaultValue = true)]
        public string Preset { get; set; }

        /// <summary>
        /// Gets or Sets Refs
        /// </summary>
        [DataMember(Name = "refs", IsRequired = true, EmitDefaultValue = true)]
        public int Refs { get; set; }

        /// <summary>
        /// Gets or Sets TargetResolution
        /// </summary>
        [DataMember(Name = "targetResolution", IsRequired = true, EmitDefaultValue = true)]
        public string TargetResolution { get; set; }

        /// <summary>
        /// Gets or Sets TemporalAQ
        /// </summary>
        [DataMember(Name = "temporalAQ", IsRequired = true, EmitDefaultValue = true)]
        public bool TemporalAQ { get; set; }

        /// <summary>
        /// Gets or Sets Threads
        /// </summary>
        [DataMember(Name = "threads", IsRequired = true, EmitDefaultValue = true)]
        public int Threads { get; set; }

        /// <summary>
        /// Gets or Sets TwoPass
        /// </summary>
        [DataMember(Name = "twoPass", IsRequired = true, EmitDefaultValue = true)]
        public bool TwoPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemConfigFFmpegDto {\n");
            sb.Append("  Accel: ").Append(Accel).Append("\n");
            sb.Append("  AccelDecode: ").Append(AccelDecode).Append("\n");
            sb.Append("  AcceptedAudioCodecs: ").Append(AcceptedAudioCodecs).Append("\n");
            sb.Append("  AcceptedContainers: ").Append(AcceptedContainers).Append("\n");
            sb.Append("  AcceptedVideoCodecs: ").Append(AcceptedVideoCodecs).Append("\n");
            sb.Append("  Bframes: ").Append(Bframes).Append("\n");
            sb.Append("  CqMode: ").Append(CqMode).Append("\n");
            sb.Append("  Crf: ").Append(Crf).Append("\n");
            sb.Append("  GopSize: ").Append(GopSize).Append("\n");
            sb.Append("  MaxBitrate: ").Append(MaxBitrate).Append("\n");
            sb.Append("  Npl: ").Append(Npl).Append("\n");
            sb.Append("  PreferredHwDevice: ").Append(PreferredHwDevice).Append("\n");
            sb.Append("  Preset: ").Append(Preset).Append("\n");
            sb.Append("  Refs: ").Append(Refs).Append("\n");
            sb.Append("  TargetAudioCodec: ").Append(TargetAudioCodec).Append("\n");
            sb.Append("  TargetResolution: ").Append(TargetResolution).Append("\n");
            sb.Append("  TargetVideoCodec: ").Append(TargetVideoCodec).Append("\n");
            sb.Append("  TemporalAQ: ").Append(TemporalAQ).Append("\n");
            sb.Append("  Threads: ").Append(Threads).Append("\n");
            sb.Append("  Tonemap: ").Append(Tonemap).Append("\n");
            sb.Append("  Transcode: ").Append(Transcode).Append("\n");
            sb.Append("  TwoPass: ").Append(TwoPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Bframes (int) maximum
            if (this.Bframes > (int)16)
            {
                yield return new ValidationResult("Invalid value for Bframes, must be a value less than or equal to 16.", new [] { "Bframes" });
            }

            // Bframes (int) minimum
            if (this.Bframes < (int)-1)
            {
                yield return new ValidationResult("Invalid value for Bframes, must be a value greater than or equal to -1.", new [] { "Bframes" });
            }

            // Crf (int) maximum
            if (this.Crf > (int)51)
            {
                yield return new ValidationResult("Invalid value for Crf, must be a value less than or equal to 51.", new [] { "Crf" });
            }

            // Crf (int) minimum
            if (this.Crf < (int)0)
            {
                yield return new ValidationResult("Invalid value for Crf, must be a value greater than or equal to 0.", new [] { "Crf" });
            }

            // GopSize (int) minimum
            if (this.GopSize < (int)0)
            {
                yield return new ValidationResult("Invalid value for GopSize, must be a value greater than or equal to 0.", new [] { "GopSize" });
            }

            // Npl (int) minimum
            if (this.Npl < (int)0)
            {
                yield return new ValidationResult("Invalid value for Npl, must be a value greater than or equal to 0.", new [] { "Npl" });
            }

            // Refs (int) maximum
            if (this.Refs > (int)6)
            {
                yield return new ValidationResult("Invalid value for Refs, must be a value less than or equal to 6.", new [] { "Refs" });
            }

            // Refs (int) minimum
            if (this.Refs < (int)0)
            {
                yield return new ValidationResult("Invalid value for Refs, must be a value greater than or equal to 0.", new [] { "Refs" });
            }

            // Threads (int) minimum
            if (this.Threads < (int)0)
            {
                yield return new ValidationResult("Invalid value for Threads, must be a value greater than or equal to 0.", new [] { "Threads" });
            }

            yield break;
        }
    }

}

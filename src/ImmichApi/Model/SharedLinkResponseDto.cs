/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// SharedLinkResponseDto
    /// </summary>
    [DataContract(Name = "SharedLinkResponseDto")]
    public partial class SharedLinkResponseDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public SharedLinkType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedLinkResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SharedLinkResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedLinkResponseDto" /> class.
        /// </summary>
        /// <param name="album">album.</param>
        /// <param name="allowDownload">allowDownload (required).</param>
        /// <param name="allowUpload">allowUpload (required).</param>
        /// <param name="assets">assets (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="expiresAt">expiresAt (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="key">key (required).</param>
        /// <param name="password">password (required).</param>
        /// <param name="showMetadata">showMetadata (required).</param>
        /// <param name="token">token.</param>
        /// <param name="type">type (required).</param>
        /// <param name="userId">userId (required).</param>
        public SharedLinkResponseDto(AlbumResponseDto album = default(AlbumResponseDto), bool allowDownload = default(bool), bool allowUpload = default(bool), List<AssetResponseDto> assets = default(List<AssetResponseDto>), DateTime createdAt = default(DateTime), string description = default(string), DateTime? expiresAt = default(DateTime?), string id = default(string), string key = default(string), string password = default(string), bool showMetadata = default(bool), string token = default(string), SharedLinkType type = default(SharedLinkType), string userId = default(string))
        {
            this.AllowDownload = allowDownload;
            this.AllowUpload = allowUpload;
            // to ensure "assets" is required (not null)
            if (assets == null)
            {
                throw new ArgumentNullException("assets is a required property for SharedLinkResponseDto and cannot be null");
            }
            this.Assets = assets;
            this.CreatedAt = createdAt;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for SharedLinkResponseDto and cannot be null");
            }
            this.Description = description;
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new ArgumentNullException("expiresAt is a required property for SharedLinkResponseDto and cannot be null");
            }
            this.ExpiresAt = expiresAt;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SharedLinkResponseDto and cannot be null");
            }
            this.Id = id;
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for SharedLinkResponseDto and cannot be null");
            }
            this.Key = key;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for SharedLinkResponseDto and cannot be null");
            }
            this.Password = password;
            this.ShowMetadata = showMetadata;
            this.Type = type;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for SharedLinkResponseDto and cannot be null");
            }
            this.UserId = userId;
            this.Album = album;
            this.Token = token;
        }

        /// <summary>
        /// Gets or Sets Album
        /// </summary>
        [DataMember(Name = "album", EmitDefaultValue = false)]
        public AlbumResponseDto Album { get; set; }

        /// <summary>
        /// Gets or Sets AllowDownload
        /// </summary>
        [DataMember(Name = "allowDownload", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowDownload { get; set; }

        /// <summary>
        /// Gets or Sets AllowUpload
        /// </summary>
        [DataMember(Name = "allowUpload", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowUpload { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", IsRequired = true, EmitDefaultValue = true)]
        public List<AssetResponseDto> Assets { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expiresAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets ShowMetadata
        /// </summary>
        [DataMember(Name = "showMetadata", IsRequired = true, EmitDefaultValue = true)]
        public bool ShowMetadata { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedLinkResponseDto {\n");
            sb.Append("  Album: ").Append(Album).Append("\n");
            sb.Append("  AllowDownload: ").Append(AllowDownload).Append("\n");
            sb.Append("  AllowUpload: ").Append(AllowUpload).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ShowMetadata: ").Append(ShowMetadata).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

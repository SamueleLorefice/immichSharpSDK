/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// ServerFeaturesDto
    /// </summary>
    [DataContract(Name = "ServerFeaturesDto")]
    public partial class ServerFeaturesDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerFeaturesDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServerFeaturesDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerFeaturesDto" /> class.
        /// </summary>
        /// <param name="configFile">configFile (required).</param>
        /// <param name="duplicateDetection">duplicateDetection (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="facialRecognition">facialRecognition (required).</param>
        /// <param name="map">map (required).</param>
        /// <param name="oauth">oauth (required).</param>
        /// <param name="oauthAutoLaunch">oauthAutoLaunch (required).</param>
        /// <param name="passwordLogin">passwordLogin (required).</param>
        /// <param name="reverseGeocoding">reverseGeocoding (required).</param>
        /// <param name="search">search (required).</param>
        /// <param name="sidecar">sidecar (required).</param>
        /// <param name="smartSearch">smartSearch (required).</param>
        /// <param name="trash">trash (required).</param>
        public ServerFeaturesDto(bool configFile = default(bool), bool duplicateDetection = default(bool), bool email = default(bool), bool facialRecognition = default(bool), bool map = default(bool), bool oauth = default(bool), bool oauthAutoLaunch = default(bool), bool passwordLogin = default(bool), bool reverseGeocoding = default(bool), bool search = default(bool), bool sidecar = default(bool), bool smartSearch = default(bool), bool trash = default(bool))
        {
            this.ConfigFile = configFile;
            this.DuplicateDetection = duplicateDetection;
            this.Email = email;
            this.FacialRecognition = facialRecognition;
            this.Map = map;
            this.Oauth = oauth;
            this.OauthAutoLaunch = oauthAutoLaunch;
            this.PasswordLogin = passwordLogin;
            this.ReverseGeocoding = reverseGeocoding;
            this.Search = search;
            this.Sidecar = sidecar;
            this.SmartSearch = smartSearch;
            this.Trash = trash;
        }

        /// <summary>
        /// Gets or Sets ConfigFile
        /// </summary>
        [DataMember(Name = "configFile", IsRequired = true, EmitDefaultValue = true)]
        public bool ConfigFile { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateDetection
        /// </summary>
        [DataMember(Name = "duplicateDetection", IsRequired = true, EmitDefaultValue = true)]
        public bool DuplicateDetection { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public bool Email { get; set; }

        /// <summary>
        /// Gets or Sets FacialRecognition
        /// </summary>
        [DataMember(Name = "facialRecognition", IsRequired = true, EmitDefaultValue = true)]
        public bool FacialRecognition { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name = "map", IsRequired = true, EmitDefaultValue = true)]
        public bool Map { get; set; }

        /// <summary>
        /// Gets or Sets Oauth
        /// </summary>
        [DataMember(Name = "oauth", IsRequired = true, EmitDefaultValue = true)]
        public bool Oauth { get; set; }

        /// <summary>
        /// Gets or Sets OauthAutoLaunch
        /// </summary>
        [DataMember(Name = "oauthAutoLaunch", IsRequired = true, EmitDefaultValue = true)]
        public bool OauthAutoLaunch { get; set; }

        /// <summary>
        /// Gets or Sets PasswordLogin
        /// </summary>
        [DataMember(Name = "passwordLogin", IsRequired = true, EmitDefaultValue = true)]
        public bool PasswordLogin { get; set; }

        /// <summary>
        /// Gets or Sets ReverseGeocoding
        /// </summary>
        [DataMember(Name = "reverseGeocoding", IsRequired = true, EmitDefaultValue = true)]
        public bool ReverseGeocoding { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name = "search", IsRequired = true, EmitDefaultValue = true)]
        public bool Search { get; set; }

        /// <summary>
        /// Gets or Sets Sidecar
        /// </summary>
        [DataMember(Name = "sidecar", IsRequired = true, EmitDefaultValue = true)]
        public bool Sidecar { get; set; }

        /// <summary>
        /// Gets or Sets SmartSearch
        /// </summary>
        [DataMember(Name = "smartSearch", IsRequired = true, EmitDefaultValue = true)]
        public bool SmartSearch { get; set; }

        /// <summary>
        /// Gets or Sets Trash
        /// </summary>
        [DataMember(Name = "trash", IsRequired = true, EmitDefaultValue = true)]
        public bool Trash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerFeaturesDto {\n");
            sb.Append("  ConfigFile: ").Append(ConfigFile).Append("\n");
            sb.Append("  DuplicateDetection: ").Append(DuplicateDetection).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FacialRecognition: ").Append(FacialRecognition).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("  OauthAutoLaunch: ").Append(OauthAutoLaunch).Append("\n");
            sb.Append("  PasswordLogin: ").Append(PasswordLogin).Append("\n");
            sb.Append("  ReverseGeocoding: ").Append(ReverseGeocoding).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Sidecar: ").Append(Sidecar).Append("\n");
            sb.Append("  SmartSearch: ").Append(SmartSearch).Append("\n");
            sb.Append("  Trash: ").Append(Trash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

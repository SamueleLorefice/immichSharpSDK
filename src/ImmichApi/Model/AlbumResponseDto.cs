/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// AlbumResponseDto
    /// </summary>
    [DataContract(Name = "AlbumResponseDto")]
    public partial class AlbumResponseDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public AssetOrder? Order { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AlbumResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumResponseDto" /> class.
        /// </summary>
        /// <param name="albumName">albumName (required).</param>
        /// <param name="albumThumbnailAssetId">albumThumbnailAssetId (required).</param>
        /// <param name="albumUsers">albumUsers (required).</param>
        /// <param name="assetCount">assetCount (required).</param>
        /// <param name="assets">assets (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="hasSharedLink">hasSharedLink (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="isActivityEnabled">isActivityEnabled (required).</param>
        /// <param name="lastModifiedAssetTimestamp">lastModifiedAssetTimestamp.</param>
        /// <param name="order">order.</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="ownerId">ownerId (required).</param>
        /// <param name="shared">shared (required).</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public AlbumResponseDto(string albumName = default(string), string albumThumbnailAssetId = default(string), List<AlbumUserResponseDto> albumUsers = default(List<AlbumUserResponseDto>), int assetCount = default(int), List<AssetResponseDto> assets = default(List<AssetResponseDto>), DateTime createdAt = default(DateTime), string description = default(string), DateTime endDate = default(DateTime), bool hasSharedLink = default(bool), string id = default(string), bool isActivityEnabled = default(bool), DateTime lastModifiedAssetTimestamp = default(DateTime), AssetOrder? order = default(AssetOrder?), UserResponseDto owner = default(UserResponseDto), string ownerId = default(string), bool shared = default(bool), DateTime startDate = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            // to ensure "albumName" is required (not null)
            if (albumName == null)
            {
                throw new ArgumentNullException("albumName is a required property for AlbumResponseDto and cannot be null");
            }
            this.AlbumName = albumName;
            // to ensure "albumThumbnailAssetId" is required (not null)
            if (albumThumbnailAssetId == null)
            {
                throw new ArgumentNullException("albumThumbnailAssetId is a required property for AlbumResponseDto and cannot be null");
            }
            this.AlbumThumbnailAssetId = albumThumbnailAssetId;
            // to ensure "albumUsers" is required (not null)
            if (albumUsers == null)
            {
                throw new ArgumentNullException("albumUsers is a required property for AlbumResponseDto and cannot be null");
            }
            this.AlbumUsers = albumUsers;
            this.AssetCount = assetCount;
            // to ensure "assets" is required (not null)
            if (assets == null)
            {
                throw new ArgumentNullException("assets is a required property for AlbumResponseDto and cannot be null");
            }
            this.Assets = assets;
            this.CreatedAt = createdAt;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for AlbumResponseDto and cannot be null");
            }
            this.Description = description;
            this.HasSharedLink = hasSharedLink;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AlbumResponseDto and cannot be null");
            }
            this.Id = id;
            this.IsActivityEnabled = isActivityEnabled;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for AlbumResponseDto and cannot be null");
            }
            this.Owner = owner;
            // to ensure "ownerId" is required (not null)
            if (ownerId == null)
            {
                throw new ArgumentNullException("ownerId is a required property for AlbumResponseDto and cannot be null");
            }
            this.OwnerId = ownerId;
            this.Shared = shared;
            this.UpdatedAt = updatedAt;
            this.EndDate = endDate;
            this.LastModifiedAssetTimestamp = lastModifiedAssetTimestamp;
            this.Order = order;
            this.StartDate = startDate;
        }

        /// <summary>
        /// Gets or Sets AlbumName
        /// </summary>
        [DataMember(Name = "albumName", IsRequired = true, EmitDefaultValue = true)]
        public string AlbumName { get; set; }

        /// <summary>
        /// Gets or Sets AlbumThumbnailAssetId
        /// </summary>
        [DataMember(Name = "albumThumbnailAssetId", IsRequired = true, EmitDefaultValue = true)]
        public string AlbumThumbnailAssetId { get; set; }

        /// <summary>
        /// Gets or Sets AlbumUsers
        /// </summary>
        [DataMember(Name = "albumUsers", IsRequired = true, EmitDefaultValue = true)]
        public List<AlbumUserResponseDto> AlbumUsers { get; set; }

        /// <summary>
        /// Gets or Sets AssetCount
        /// </summary>
        [DataMember(Name = "assetCount", IsRequired = true, EmitDefaultValue = true)]
        public int AssetCount { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", IsRequired = true, EmitDefaultValue = true)]
        public List<AssetResponseDto> Assets { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets HasSharedLink
        /// </summary>
        [DataMember(Name = "hasSharedLink", IsRequired = true, EmitDefaultValue = true)]
        public bool HasSharedLink { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActivityEnabled
        /// </summary>
        [DataMember(Name = "isActivityEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsActivityEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedAssetTimestamp
        /// </summary>
        [DataMember(Name = "lastModifiedAssetTimestamp", EmitDefaultValue = false)]
        public DateTime LastModifiedAssetTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public UserResponseDto Owner { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name = "ownerId", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", IsRequired = true, EmitDefaultValue = true)]
        public bool Shared { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlbumResponseDto {\n");
            sb.Append("  AlbumName: ").Append(AlbumName).Append("\n");
            sb.Append("  AlbumThumbnailAssetId: ").Append(AlbumThumbnailAssetId).Append("\n");
            sb.Append("  AlbumUsers: ").Append(AlbumUsers).Append("\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HasSharedLink: ").Append(HasSharedLink).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActivityEnabled: ").Append(IsActivityEnabled).Append("\n");
            sb.Append("  LastModifiedAssetTimestamp: ").Append(LastModifiedAssetTimestamp).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// LoginResponseDto
    /// </summary>
    [DataContract(Name = "LoginResponseDto")]
    public partial class LoginResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoginResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResponseDto" /> class.
        /// </summary>
        /// <param name="accessToken">accessToken (required).</param>
        /// <param name="isAdmin">isAdmin (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="profileImagePath">profileImagePath (required).</param>
        /// <param name="shouldChangePassword">shouldChangePassword (required).</param>
        /// <param name="userEmail">userEmail (required).</param>
        /// <param name="userId">userId (required).</param>
        public LoginResponseDto(string accessToken = default(string), bool isAdmin = default(bool), string name = default(string), string profileImagePath = default(string), bool shouldChangePassword = default(bool), string userEmail = default(string), string userId = default(string))
        {
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken is a required property for LoginResponseDto and cannot be null");
            }
            this.AccessToken = accessToken;
            this.IsAdmin = isAdmin;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LoginResponseDto and cannot be null");
            }
            this.Name = name;
            // to ensure "profileImagePath" is required (not null)
            if (profileImagePath == null)
            {
                throw new ArgumentNullException("profileImagePath is a required property for LoginResponseDto and cannot be null");
            }
            this.ProfileImagePath = profileImagePath;
            this.ShouldChangePassword = shouldChangePassword;
            // to ensure "userEmail" is required (not null)
            if (userEmail == null)
            {
                throw new ArgumentNullException("userEmail is a required property for LoginResponseDto and cannot be null");
            }
            this.UserEmail = userEmail;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for LoginResponseDto and cannot be null");
            }
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name = "accessToken", IsRequired = true, EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name = "isAdmin", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImagePath
        /// </summary>
        [DataMember(Name = "profileImagePath", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileImagePath { get; set; }

        /// <summary>
        /// Gets or Sets ShouldChangePassword
        /// </summary>
        [DataMember(Name = "shouldChangePassword", IsRequired = true, EmitDefaultValue = true)]
        public bool ShouldChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name = "userEmail", IsRequired = true, EmitDefaultValue = true)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginResponseDto {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProfileImagePath: ").Append(ProfileImagePath).Append("\n");
            sb.Append("  ShouldChangePassword: ").Append(ShouldChangePassword).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

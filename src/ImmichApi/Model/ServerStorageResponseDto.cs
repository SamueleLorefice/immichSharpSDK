/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// ServerStorageResponseDto
    /// </summary>
    [DataContract(Name = "ServerStorageResponseDto")]
    public partial class ServerStorageResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerStorageResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServerStorageResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerStorageResponseDto" /> class.
        /// </summary>
        /// <param name="diskAvailable">diskAvailable (required).</param>
        /// <param name="diskAvailableRaw">diskAvailableRaw (required).</param>
        /// <param name="diskSize">diskSize (required).</param>
        /// <param name="diskSizeRaw">diskSizeRaw (required).</param>
        /// <param name="diskUsagePercentage">diskUsagePercentage (required).</param>
        /// <param name="diskUse">diskUse (required).</param>
        /// <param name="diskUseRaw">diskUseRaw (required).</param>
        public ServerStorageResponseDto(string diskAvailable = default(string), long diskAvailableRaw = default(long), string diskSize = default(string), long diskSizeRaw = default(long), double diskUsagePercentage = default(double), string diskUse = default(string), long diskUseRaw = default(long))
        {
            // to ensure "diskAvailable" is required (not null)
            if (diskAvailable == null)
            {
                throw new ArgumentNullException("diskAvailable is a required property for ServerStorageResponseDto and cannot be null");
            }
            this.DiskAvailable = diskAvailable;
            this.DiskAvailableRaw = diskAvailableRaw;
            // to ensure "diskSize" is required (not null)
            if (diskSize == null)
            {
                throw new ArgumentNullException("diskSize is a required property for ServerStorageResponseDto and cannot be null");
            }
            this.DiskSize = diskSize;
            this.DiskSizeRaw = diskSizeRaw;
            this.DiskUsagePercentage = diskUsagePercentage;
            // to ensure "diskUse" is required (not null)
            if (diskUse == null)
            {
                throw new ArgumentNullException("diskUse is a required property for ServerStorageResponseDto and cannot be null");
            }
            this.DiskUse = diskUse;
            this.DiskUseRaw = diskUseRaw;
        }

        /// <summary>
        /// Gets or Sets DiskAvailable
        /// </summary>
        [DataMember(Name = "diskAvailable", IsRequired = true, EmitDefaultValue = true)]
        public string DiskAvailable { get; set; }

        /// <summary>
        /// Gets or Sets DiskAvailableRaw
        /// </summary>
        [DataMember(Name = "diskAvailableRaw", IsRequired = true, EmitDefaultValue = true)]
        public long DiskAvailableRaw { get; set; }

        /// <summary>
        /// Gets or Sets DiskSize
        /// </summary>
        [DataMember(Name = "diskSize", IsRequired = true, EmitDefaultValue = true)]
        public string DiskSize { get; set; }

        /// <summary>
        /// Gets or Sets DiskSizeRaw
        /// </summary>
        [DataMember(Name = "diskSizeRaw", IsRequired = true, EmitDefaultValue = true)]
        public long DiskSizeRaw { get; set; }

        /// <summary>
        /// Gets or Sets DiskUsagePercentage
        /// </summary>
        [DataMember(Name = "diskUsagePercentage", IsRequired = true, EmitDefaultValue = true)]
        public double DiskUsagePercentage { get; set; }

        /// <summary>
        /// Gets or Sets DiskUse
        /// </summary>
        [DataMember(Name = "diskUse", IsRequired = true, EmitDefaultValue = true)]
        public string DiskUse { get; set; }

        /// <summary>
        /// Gets or Sets DiskUseRaw
        /// </summary>
        [DataMember(Name = "diskUseRaw", IsRequired = true, EmitDefaultValue = true)]
        public long DiskUseRaw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerStorageResponseDto {\n");
            sb.Append("  DiskAvailable: ").Append(DiskAvailable).Append("\n");
            sb.Append("  DiskAvailableRaw: ").Append(DiskAvailableRaw).Append("\n");
            sb.Append("  DiskSize: ").Append(DiskSize).Append("\n");
            sb.Append("  DiskSizeRaw: ").Append(DiskSizeRaw).Append("\n");
            sb.Append("  DiskUsagePercentage: ").Append(DiskUsagePercentage).Append("\n");
            sb.Append("  DiskUse: ").Append(DiskUse).Append("\n");
            sb.Append("  DiskUseRaw: ").Append(DiskUseRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

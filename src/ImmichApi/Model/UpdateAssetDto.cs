/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ImmichApi.Client.OpenAPIDateConverter;

namespace ImmichApi.Model
{
    /// <summary>
    /// UpdateAssetDto
    /// </summary>
    [DataContract(Name = "UpdateAssetDto")]
    public partial class UpdateAssetDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAssetDto" /> class.
        /// </summary>
        /// <param name="dateTimeOriginal">dateTimeOriginal.</param>
        /// <param name="description">description.</param>
        /// <param name="isArchived">isArchived.</param>
        /// <param name="isFavorite">isFavorite.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        public UpdateAssetDto(string dateTimeOriginal = default(string), string description = default(string), bool isArchived = default(bool), bool isFavorite = default(bool), decimal latitude = default(decimal), decimal longitude = default(decimal))
        {
            this.DateTimeOriginal = dateTimeOriginal;
            this.Description = description;
            this.IsArchived = isArchived;
            this.IsFavorite = isFavorite;
            this.Latitude = latitude;
            this.Longitude = longitude;
        }

        /// <summary>
        /// Gets or Sets DateTimeOriginal
        /// </summary>
        [DataMember(Name = "dateTimeOriginal", EmitDefaultValue = false)]
        public string DateTimeOriginal { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsArchived
        /// </summary>
        [DataMember(Name = "isArchived", EmitDefaultValue = true)]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets or Sets IsFavorite
        /// </summary>
        [DataMember(Name = "isFavorite", EmitDefaultValue = true)]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public decimal Longitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAssetDto {\n");
            sb.Append("  DateTimeOriginal: ").Append(DateTimeOriginal).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

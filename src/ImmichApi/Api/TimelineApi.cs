/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ImmichApi.Client;
using ImmichApi.Model;

namespace ImmichApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimelineApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AssetResponseDto&gt;</returns>
        List<AssetResponseDto> GetTimeBucket(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AssetResponseDto&gt;</returns>
        ApiResponse<List<AssetResponseDto>> GetTimeBucketWithHttpInfo(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TimeBucketResponseDto&gt;</returns>
        List<TimeBucketResponseDto> GetTimeBuckets(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TimeBucketResponseDto&gt;</returns>
        ApiResponse<List<TimeBucketResponseDto>> GetTimeBucketsWithHttpInfo(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimelineApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AssetResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<AssetResponseDto>> GetTimeBucketAsync(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AssetResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetResponseDto>>> GetTimeBucketWithHttpInfoAsync(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeBucketResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<TimeBucketResponseDto>> GetTimeBucketsAsync(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeBucketResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimeBucketResponseDto>>> GetTimeBucketsWithHttpInfoAsync(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimelineApi : ITimelineApiSync, ITimelineApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimelineApi : ITimelineApi
    {
        private ImmichApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimelineApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimelineApi(string basePath)
        {
            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                new ImmichApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimelineApi(ImmichApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TimelineApi(ImmichApi.Client.ISynchronousClient client, ImmichApi.Client.IAsynchronousClient asyncClient, ImmichApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ImmichApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ImmichApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ImmichApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ImmichApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AssetResponseDto&gt;</returns>
        public List<AssetResponseDto> GetTimeBucket(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<AssetResponseDto>> localVarResponse = GetTimeBucketWithHttpInfo(size, timeBucket, albumId, isArchived, isFavorite, isTrashed, key, order, personId, userId, withPartners, withStacked);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AssetResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<AssetResponseDto>> GetTimeBucketWithHttpInfo(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'timeBucket' is set
            if (timeBucket == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'timeBucket' when calling TimelineApi->GetTimeBucket");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (albumId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "albumId", albumId));
            }
            if (isArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isArchived", isArchived));
            }
            if (isFavorite != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isFavorite", isFavorite));
            }
            if (isTrashed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isTrashed", isTrashed));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "personId", personId));
            }
            localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "timeBucket", timeBucket));
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (withPartners != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withPartners", withPartners));
            }
            if (withStacked != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withStacked", withStacked));
            }

            localVarRequestOptions.Operation = "TimelineApi.GetTimeBucket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AssetResponseDto>>("/timeline/bucket", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeBucket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AssetResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetResponseDto>> GetTimeBucketAsync(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<AssetResponseDto>> localVarResponse = await GetTimeBucketWithHttpInfoAsync(size, timeBucket, albumId, isArchived, isFavorite, isTrashed, key, order, personId, userId, withPartners, withStacked, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="timeBucket"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AssetResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<AssetResponseDto>>> GetTimeBucketWithHttpInfoAsync(TimeBucketSize size, string timeBucket, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timeBucket' is set
            if (timeBucket == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'timeBucket' when calling TimelineApi->GetTimeBucket");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (albumId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "albumId", albumId));
            }
            if (isArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isArchived", isArchived));
            }
            if (isFavorite != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isFavorite", isFavorite));
            }
            if (isTrashed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isTrashed", isTrashed));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "personId", personId));
            }
            localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "timeBucket", timeBucket));
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (withPartners != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withPartners", withPartners));
            }
            if (withStacked != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withStacked", withStacked));
            }

            localVarRequestOptions.Operation = "TimelineApi.GetTimeBucket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AssetResponseDto>>("/timeline/bucket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeBucket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TimeBucketResponseDto&gt;</returns>
        public List<TimeBucketResponseDto> GetTimeBuckets(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<TimeBucketResponseDto>> localVarResponse = GetTimeBucketsWithHttpInfo(size, albumId, isArchived, isFavorite, isTrashed, key, order, personId, userId, withPartners, withStacked);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TimeBucketResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<TimeBucketResponseDto>> GetTimeBucketsWithHttpInfo(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (albumId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "albumId", albumId));
            }
            if (isArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isArchived", isArchived));
            }
            if (isFavorite != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isFavorite", isFavorite));
            }
            if (isTrashed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isTrashed", isTrashed));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "personId", personId));
            }
            localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (withPartners != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withPartners", withPartners));
            }
            if (withStacked != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withStacked", withStacked));
            }

            localVarRequestOptions.Operation = "TimelineApi.GetTimeBuckets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TimeBucketResponseDto>>("/timeline/buckets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeBuckets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimeBucketResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimeBucketResponseDto>> GetTimeBucketsAsync(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<TimeBucketResponseDto>> localVarResponse = await GetTimeBucketsWithHttpInfoAsync(size, albumId, isArchived, isFavorite, isTrashed, key, order, personId, userId, withPartners, withStacked, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size"></param>
        /// <param name="albumId"> (optional)</param>
        /// <param name="isArchived"> (optional)</param>
        /// <param name="isFavorite"> (optional)</param>
        /// <param name="isTrashed"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="personId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="withPartners"> (optional)</param>
        /// <param name="withStacked"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimeBucketResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<TimeBucketResponseDto>>> GetTimeBucketsWithHttpInfoAsync(TimeBucketSize size, Guid? albumId = default(Guid?), bool? isArchived = default(bool?), bool? isFavorite = default(bool?), bool? isTrashed = default(bool?), string? key = default(string?), AssetOrder? order = default(AssetOrder?), Guid? personId = default(Guid?), Guid? userId = default(Guid?), bool? withPartners = default(bool?), bool? withStacked = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (albumId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "albumId", albumId));
            }
            if (isArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isArchived", isArchived));
            }
            if (isFavorite != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isFavorite", isFavorite));
            }
            if (isTrashed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "isTrashed", isTrashed));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (personId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "personId", personId));
            }
            localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (withPartners != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withPartners", withPartners));
            }
            if (withStacked != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withStacked", withStacked));
            }

            localVarRequestOptions.Operation = "TimelineApi.GetTimeBuckets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TimeBucketResponseDto>>("/timeline/buckets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeBuckets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

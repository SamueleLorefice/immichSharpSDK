/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ImmichApi.Client;
using ImmichApi.Model;

namespace ImmichApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonResponseDto</returns>
        PersonResponseDto CreatePerson(PersonCreateDto personCreateDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonResponseDto</returns>
        ApiResponse<PersonResponseDto> CreatePersonWithHttpInfo(PersonCreateDto personCreateDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeopleResponseDto</returns>
        PeopleResponseDto GetAllPeople(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeopleResponseDto</returns>
        ApiResponse<PeopleResponseDto> GetAllPeopleWithHttpInfo(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonResponseDto</returns>
        PersonResponseDto GetPerson(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonResponseDto</returns>
        ApiResponse<PersonResponseDto> GetPersonWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AssetResponseDto&gt;</returns>
        List<AssetResponseDto> GetPersonAssets(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AssetResponseDto&gt;</returns>
        ApiResponse<List<AssetResponseDto>> GetPersonAssetsWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonStatisticsResponseDto</returns>
        PersonStatisticsResponseDto GetPersonStatistics(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonStatisticsResponseDto</returns>
        ApiResponse<PersonStatisticsResponseDto> GetPersonStatisticsWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPersonThumbnail(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPersonThumbnailWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        List<BulkIdResponseDto> MergePerson(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        ApiResponse<List<BulkIdResponseDto>> MergePersonWithHttpInfo(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PersonResponseDto&gt;</returns>
        List<PersonResponseDto> ReassignFaces(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PersonResponseDto&gt;</returns>
        ApiResponse<List<PersonResponseDto>> ReassignFacesWithHttpInfo(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        List<BulkIdResponseDto> UpdatePeople(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        ApiResponse<List<BulkIdResponseDto>> UpdatePeopleWithHttpInfo(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonResponseDto</returns>
        PersonResponseDto UpdatePerson(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonResponseDto</returns>
        ApiResponse<PersonResponseDto> UpdatePersonWithHttpInfo(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonResponseDto</returns>
        System.Threading.Tasks.Task<PersonResponseDto> CreatePersonAsync(PersonCreateDto personCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonResponseDto>> CreatePersonWithHttpInfoAsync(PersonCreateDto personCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleResponseDto</returns>
        System.Threading.Tasks.Task<PeopleResponseDto> GetAllPeopleAsync(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleResponseDto>> GetAllPeopleWithHttpInfoAsync(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonResponseDto</returns>
        System.Threading.Tasks.Task<PersonResponseDto> GetPersonAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonResponseDto>> GetPersonWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AssetResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<AssetResponseDto>> GetPersonAssetsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AssetResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetResponseDto>>> GetPersonAssetsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonStatisticsResponseDto</returns>
        System.Threading.Tasks.Task<PersonStatisticsResponseDto> GetPersonStatisticsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonStatisticsResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonStatisticsResponseDto>> GetPersonStatisticsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPersonThumbnailAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPersonThumbnailWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<BulkIdResponseDto>> MergePersonAsync(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkIdResponseDto>>> MergePersonWithHttpInfoAsync(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PersonResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<PersonResponseDto>> ReassignFacesAsync(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PersonResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PersonResponseDto>>> ReassignFacesWithHttpInfoAsync(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<BulkIdResponseDto>> UpdatePeopleAsync(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkIdResponseDto>>> UpdatePeopleWithHttpInfoAsync(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonResponseDto</returns>
        System.Threading.Tasks.Task<PersonResponseDto> UpdatePersonAsync(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonResponseDto>> UpdatePersonWithHttpInfoAsync(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleApi : IPeopleApiSync, IPeopleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeopleApi : IPeopleApi
    {
        private ImmichApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleApi(string basePath)
        {
            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                new ImmichApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PeopleApi(ImmichApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PeopleApi(ImmichApi.Client.ISynchronousClient client, ImmichApi.Client.IAsynchronousClient asyncClient, ImmichApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ImmichApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ImmichApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ImmichApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ImmichApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonResponseDto</returns>
        public PersonResponseDto CreatePerson(PersonCreateDto personCreateDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<PersonResponseDto> localVarResponse = CreatePersonWithHttpInfo(personCreateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonResponseDto</returns>
        public ImmichApi.Client.ApiResponse<PersonResponseDto> CreatePersonWithHttpInfo(PersonCreateDto personCreateDto, int operationIndex = 0)
        {
            // verify the required parameter 'personCreateDto' is set
            if (personCreateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'personCreateDto' when calling PeopleApi->CreatePerson");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = personCreateDto;

            localVarRequestOptions.Operation = "PeopleApi.CreatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PersonResponseDto>("/people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonResponseDto</returns>
        public async System.Threading.Tasks.Task<PersonResponseDto> CreatePersonAsync(PersonCreateDto personCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<PersonResponseDto> localVarResponse = await CreatePersonWithHttpInfoAsync(personCreateDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<PersonResponseDto>> CreatePersonWithHttpInfoAsync(PersonCreateDto personCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'personCreateDto' is set
            if (personCreateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'personCreateDto' when calling PeopleApi->CreatePerson");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = personCreateDto;

            localVarRequestOptions.Operation = "PeopleApi.CreatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PersonResponseDto>("/people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeopleResponseDto</returns>
        public PeopleResponseDto GetAllPeople(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<PeopleResponseDto> localVarResponse = GetAllPeopleWithHttpInfo(page, size, withHidden);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeopleResponseDto</returns>
        public ImmichApi.Client.ApiResponse<PeopleResponseDto> GetAllPeopleWithHttpInfo(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (withHidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withHidden", withHidden));
            }

            localVarRequestOptions.Operation = "PeopleApi.GetAllPeople";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PeopleResponseDto>("/people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleResponseDto</returns>
        public async System.Threading.Tasks.Task<PeopleResponseDto> GetAllPeopleAsync(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<PeopleResponseDto> localVarResponse = await GetAllPeopleWithHttpInfoAsync(page, size, withHidden, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1M)</param>
        /// <param name="size">Number of items per page (optional, default to 500M)</param>
        /// <param name="withHidden"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<PeopleResponseDto>> GetAllPeopleWithHttpInfoAsync(decimal? page = default(decimal?), decimal? size = default(decimal?), bool? withHidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (withHidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withHidden", withHidden));
            }

            localVarRequestOptions.Operation = "PeopleApi.GetAllPeople";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PeopleResponseDto>("/people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonResponseDto</returns>
        public PersonResponseDto GetPerson(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<PersonResponseDto> localVarResponse = GetPersonWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonResponseDto</returns>
        public ImmichApi.Client.ApiResponse<PersonResponseDto> GetPersonWithHttpInfo(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonResponseDto>("/people/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonResponseDto</returns>
        public async System.Threading.Tasks.Task<PersonResponseDto> GetPersonAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<PersonResponseDto> localVarResponse = await GetPersonWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<PersonResponseDto>> GetPersonWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonResponseDto>("/people/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AssetResponseDto&gt;</returns>
        public List<AssetResponseDto> GetPersonAssets(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<AssetResponseDto>> localVarResponse = GetPersonAssetsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AssetResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<AssetResponseDto>> GetPersonAssetsWithHttpInfo(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPersonAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AssetResponseDto>>("/people/{id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AssetResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetResponseDto>> GetPersonAssetsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<AssetResponseDto>> localVarResponse = await GetPersonAssetsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AssetResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<AssetResponseDto>>> GetPersonAssetsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPersonAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AssetResponseDto>>("/people/{id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonStatisticsResponseDto</returns>
        public PersonStatisticsResponseDto GetPersonStatistics(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<PersonStatisticsResponseDto> localVarResponse = GetPersonStatisticsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonStatisticsResponseDto</returns>
        public ImmichApi.Client.ApiResponse<PersonStatisticsResponseDto> GetPersonStatisticsWithHttpInfo(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPersonStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonStatisticsResponseDto>("/people/{id}/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonStatisticsResponseDto</returns>
        public async System.Threading.Tasks.Task<PersonStatisticsResponseDto> GetPersonStatisticsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<PersonStatisticsResponseDto> localVarResponse = await GetPersonStatisticsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonStatisticsResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<PersonStatisticsResponseDto>> GetPersonStatisticsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPersonStatistics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonStatisticsResponseDto>("/people/{id}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPersonThumbnail(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<System.IO.Stream> localVarResponse = GetPersonThumbnailWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ImmichApi.Client.ApiResponse<System.IO.Stream> GetPersonThumbnailWithHttpInfo(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPersonThumbnail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/people/{id}/thumbnail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonThumbnail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPersonThumbnailAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetPersonThumbnailWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<System.IO.Stream>> GetPersonThumbnailWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PeopleApi.GetPersonThumbnail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/people/{id}/thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonThumbnail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        public List<BulkIdResponseDto> MergePerson(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = MergePersonWithHttpInfo(id, mergePersonDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> MergePersonWithHttpInfo(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0)
        {
            // verify the required parameter 'mergePersonDto' is set
            if (mergePersonDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'mergePersonDto' when calling PeopleApi->MergePerson");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mergePersonDto;

            localVarRequestOptions.Operation = "PeopleApi.MergePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BulkIdResponseDto>>("/people/{id}/merge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkIdResponseDto>> MergePersonAsync(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = await MergePersonWithHttpInfoAsync(id, mergePersonDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="mergePersonDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>>> MergePersonWithHttpInfoAsync(Guid id, MergePersonDto mergePersonDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mergePersonDto' is set
            if (mergePersonDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'mergePersonDto' when calling PeopleApi->MergePerson");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = mergePersonDto;

            localVarRequestOptions.Operation = "PeopleApi.MergePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BulkIdResponseDto>>("/people/{id}/merge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PersonResponseDto&gt;</returns>
        public List<PersonResponseDto> ReassignFaces(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<PersonResponseDto>> localVarResponse = ReassignFacesWithHttpInfo(id, assetFaceUpdateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PersonResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<PersonResponseDto>> ReassignFacesWithHttpInfo(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0)
        {
            // verify the required parameter 'assetFaceUpdateDto' is set
            if (assetFaceUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'assetFaceUpdateDto' when calling PeopleApi->ReassignFaces");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = assetFaceUpdateDto;

            localVarRequestOptions.Operation = "PeopleApi.ReassignFaces";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<PersonResponseDto>>("/people/{id}/reassign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReassignFaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PersonResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<PersonResponseDto>> ReassignFacesAsync(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<PersonResponseDto>> localVarResponse = await ReassignFacesWithHttpInfoAsync(id, assetFaceUpdateDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="assetFaceUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PersonResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<PersonResponseDto>>> ReassignFacesWithHttpInfoAsync(Guid id, AssetFaceUpdateDto assetFaceUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetFaceUpdateDto' is set
            if (assetFaceUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'assetFaceUpdateDto' when calling PeopleApi->ReassignFaces");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = assetFaceUpdateDto;

            localVarRequestOptions.Operation = "PeopleApi.ReassignFaces";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<PersonResponseDto>>("/people/{id}/reassign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReassignFaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        public List<BulkIdResponseDto> UpdatePeople(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = UpdatePeopleWithHttpInfo(peopleUpdateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> UpdatePeopleWithHttpInfo(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0)
        {
            // verify the required parameter 'peopleUpdateDto' is set
            if (peopleUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'peopleUpdateDto' when calling PeopleApi->UpdatePeople");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = peopleUpdateDto;

            localVarRequestOptions.Operation = "PeopleApi.UpdatePeople";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<BulkIdResponseDto>>("/people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkIdResponseDto>> UpdatePeopleAsync(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = await UpdatePeopleWithHttpInfoAsync(peopleUpdateDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peopleUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>>> UpdatePeopleWithHttpInfoAsync(PeopleUpdateDto peopleUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'peopleUpdateDto' is set
            if (peopleUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'peopleUpdateDto' when calling PeopleApi->UpdatePeople");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = peopleUpdateDto;

            localVarRequestOptions.Operation = "PeopleApi.UpdatePeople";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<BulkIdResponseDto>>("/people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePeople", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonResponseDto</returns>
        public PersonResponseDto UpdatePerson(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<PersonResponseDto> localVarResponse = UpdatePersonWithHttpInfo(id, personUpdateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonResponseDto</returns>
        public ImmichApi.Client.ApiResponse<PersonResponseDto> UpdatePersonWithHttpInfo(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0)
        {
            // verify the required parameter 'personUpdateDto' is set
            if (personUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'personUpdateDto' when calling PeopleApi->UpdatePerson");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = personUpdateDto;

            localVarRequestOptions.Operation = "PeopleApi.UpdatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PersonResponseDto>("/people/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonResponseDto</returns>
        public async System.Threading.Tasks.Task<PersonResponseDto> UpdatePersonAsync(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<PersonResponseDto> localVarResponse = await UpdatePersonWithHttpInfoAsync(id, personUpdateDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<PersonResponseDto>> UpdatePersonWithHttpInfoAsync(Guid id, PersonUpdateDto personUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'personUpdateDto' is set
            if (personUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'personUpdateDto' when calling PeopleApi->UpdatePerson");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = personUpdateDto;

            localVarRequestOptions.Operation = "PeopleApi.UpdatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PersonResponseDto>("/people/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

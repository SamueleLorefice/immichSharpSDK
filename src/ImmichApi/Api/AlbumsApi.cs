/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ImmichApi.Client;
using ImmichApi.Model;

namespace ImmichApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlbumsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        List<BulkIdResponseDto> AddAssetsToAlbum(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        ApiResponse<List<BulkIdResponseDto>> AddAssetsToAlbumWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        AlbumResponseDto AddUsersToAlbum(Guid id, AddUsersDto addUsersDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        ApiResponse<AlbumResponseDto> AddUsersToAlbumWithHttpInfo(Guid id, AddUsersDto addUsersDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        AlbumResponseDto CreateAlbum(CreateAlbumDto createAlbumDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        ApiResponse<AlbumResponseDto> CreateAlbumWithHttpInfo(CreateAlbumDto createAlbumDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAlbum(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAlbumWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumCountResponseDto</returns>
        AlbumCountResponseDto GetAlbumCount(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumCountResponseDto</returns>
        ApiResponse<AlbumCountResponseDto> GetAlbumCountWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        AlbumResponseDto GetAlbumInfo(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        ApiResponse<AlbumResponseDto> GetAlbumInfoWithHttpInfo(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AlbumResponseDto&gt;</returns>
        List<AlbumResponseDto> GetAllAlbums(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AlbumResponseDto&gt;</returns>
        ApiResponse<List<AlbumResponseDto>> GetAllAlbumsWithHttpInfo(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        List<BulkIdResponseDto> RemoveAssetFromAlbum(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        ApiResponse<List<BulkIdResponseDto>> RemoveAssetFromAlbumWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveUserFromAlbum(Guid id, string userId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserFromAlbumWithHttpInfo(Guid id, string userId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        AlbumResponseDto UpdateAlbumInfo(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        ApiResponse<AlbumResponseDto> UpdateAlbumInfoWithHttpInfo(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateAlbumUser(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAlbumUserWithHttpInfo(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlbumsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<BulkIdResponseDto>> AddAssetsToAlbumAsync(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkIdResponseDto>>> AddAssetsToAlbumWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        System.Threading.Tasks.Task<AlbumResponseDto> AddUsersToAlbumAsync(Guid id, AddUsersDto addUsersDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlbumResponseDto>> AddUsersToAlbumWithHttpInfoAsync(Guid id, AddUsersDto addUsersDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        System.Threading.Tasks.Task<AlbumResponseDto> CreateAlbumAsync(CreateAlbumDto createAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlbumResponseDto>> CreateAlbumWithHttpInfoAsync(CreateAlbumDto createAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAlbumAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAlbumWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumCountResponseDto</returns>
        System.Threading.Tasks.Task<AlbumCountResponseDto> GetAlbumCountAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumCountResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlbumCountResponseDto>> GetAlbumCountWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        System.Threading.Tasks.Task<AlbumResponseDto> GetAlbumInfoAsync(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlbumResponseDto>> GetAlbumInfoWithHttpInfoAsync(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AlbumResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<AlbumResponseDto>> GetAllAlbumsAsync(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AlbumResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlbumResponseDto>>> GetAllAlbumsWithHttpInfoAsync(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<BulkIdResponseDto>> RemoveAssetFromAlbumAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkIdResponseDto>>> RemoveAssetFromAlbumWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserFromAlbumAsync(Guid id, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserFromAlbumWithHttpInfoAsync(Guid id, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        System.Threading.Tasks.Task<AlbumResponseDto> UpdateAlbumInfoAsync(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlbumResponseDto>> UpdateAlbumInfoWithHttpInfoAsync(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAlbumUserAsync(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAlbumUserWithHttpInfoAsync(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlbumsApi : IAlbumsApiSync, IAlbumsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlbumsApi : IAlbumsApi
    {
        private ImmichApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlbumsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlbumsApi(string basePath)
        {
            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                new ImmichApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlbumsApi(ImmichApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AlbumsApi(ImmichApi.Client.ISynchronousClient client, ImmichApi.Client.IAsynchronousClient asyncClient, ImmichApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ImmichApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ImmichApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ImmichApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ImmichApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        public List<BulkIdResponseDto> AddAssetsToAlbum(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = AddAssetsToAlbumWithHttpInfo(id, bulkIdsDto, key);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> AddAssetsToAlbumWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling AlbumsApi->AddAssetsToAlbum");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "AlbumsApi.AddAssetsToAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<BulkIdResponseDto>>("/albums/{id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAssetsToAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkIdResponseDto>> AddAssetsToAlbumAsync(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = await AddAssetsToAlbumWithHttpInfoAsync(id, bulkIdsDto, key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>>> AddAssetsToAlbumWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, string? key = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling AlbumsApi->AddAssetsToAlbum");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "AlbumsApi.AddAssetsToAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<BulkIdResponseDto>>("/albums/{id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAssetsToAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        public AlbumResponseDto AddUsersToAlbum(Guid id, AddUsersDto addUsersDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = AddUsersToAlbumWithHttpInfo(id, addUsersDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        public ImmichApi.Client.ApiResponse<AlbumResponseDto> AddUsersToAlbumWithHttpInfo(Guid id, AddUsersDto addUsersDto, int operationIndex = 0)
        {
            // verify the required parameter 'addUsersDto' is set
            if (addUsersDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'addUsersDto' when calling AlbumsApi->AddUsersToAlbum");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = addUsersDto;

            localVarRequestOptions.Operation = "AlbumsApi.AddUsersToAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AlbumResponseDto>("/albums/{id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUsersToAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        public async System.Threading.Tasks.Task<AlbumResponseDto> AddUsersToAlbumAsync(Guid id, AddUsersDto addUsersDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = await AddUsersToAlbumWithHttpInfoAsync(id, addUsersDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="addUsersDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<AlbumResponseDto>> AddUsersToAlbumWithHttpInfoAsync(Guid id, AddUsersDto addUsersDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addUsersDto' is set
            if (addUsersDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'addUsersDto' when calling AlbumsApi->AddUsersToAlbum");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = addUsersDto;

            localVarRequestOptions.Operation = "AlbumsApi.AddUsersToAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AlbumResponseDto>("/albums/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUsersToAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        public AlbumResponseDto CreateAlbum(CreateAlbumDto createAlbumDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = CreateAlbumWithHttpInfo(createAlbumDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        public ImmichApi.Client.ApiResponse<AlbumResponseDto> CreateAlbumWithHttpInfo(CreateAlbumDto createAlbumDto, int operationIndex = 0)
        {
            // verify the required parameter 'createAlbumDto' is set
            if (createAlbumDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'createAlbumDto' when calling AlbumsApi->CreateAlbum");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAlbumDto;

            localVarRequestOptions.Operation = "AlbumsApi.CreateAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AlbumResponseDto>("/albums", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        public async System.Threading.Tasks.Task<AlbumResponseDto> CreateAlbumAsync(CreateAlbumDto createAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = await CreateAlbumWithHttpInfoAsync(createAlbumDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<AlbumResponseDto>> CreateAlbumWithHttpInfoAsync(CreateAlbumDto createAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createAlbumDto' is set
            if (createAlbumDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'createAlbumDto' when calling AlbumsApi->CreateAlbum");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAlbumDto;

            localVarRequestOptions.Operation = "AlbumsApi.CreateAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlbumResponseDto>("/albums", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAlbum(Guid id, int operationIndex = 0)
        {
            DeleteAlbumWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ImmichApi.Client.ApiResponse<Object> DeleteAlbumWithHttpInfo(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AlbumsApi.DeleteAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/albums/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAlbumAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAlbumWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<Object>> DeleteAlbumWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AlbumsApi.DeleteAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/albums/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumCountResponseDto</returns>
        public AlbumCountResponseDto GetAlbumCount(int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<AlbumCountResponseDto> localVarResponse = GetAlbumCountWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumCountResponseDto</returns>
        public ImmichApi.Client.ApiResponse<AlbumCountResponseDto> GetAlbumCountWithHttpInfo(int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AlbumsApi.GetAlbumCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlbumCountResponseDto>("/albums/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlbumCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumCountResponseDto</returns>
        public async System.Threading.Tasks.Task<AlbumCountResponseDto> GetAlbumCountAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<AlbumCountResponseDto> localVarResponse = await GetAlbumCountWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumCountResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<AlbumCountResponseDto>> GetAlbumCountWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AlbumsApi.GetAlbumCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AlbumCountResponseDto>("/albums/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlbumCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        public AlbumResponseDto GetAlbumInfo(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = GetAlbumInfoWithHttpInfo(id, key, withoutAssets);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        public ImmichApi.Client.ApiResponse<AlbumResponseDto> GetAlbumInfoWithHttpInfo(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (withoutAssets != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withoutAssets", withoutAssets));
            }

            localVarRequestOptions.Operation = "AlbumsApi.GetAlbumInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlbumResponseDto>("/albums/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlbumInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        public async System.Threading.Tasks.Task<AlbumResponseDto> GetAlbumInfoAsync(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = await GetAlbumInfoWithHttpInfoAsync(id, key, withoutAssets, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="key"> (optional)</param>
        /// <param name="withoutAssets"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<AlbumResponseDto>> GetAlbumInfoWithHttpInfoAsync(Guid id, string? key = default(string?), bool? withoutAssets = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (withoutAssets != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "withoutAssets", withoutAssets));
            }

            localVarRequestOptions.Operation = "AlbumsApi.GetAlbumInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AlbumResponseDto>("/albums/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlbumInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AlbumResponseDto&gt;</returns>
        public List<AlbumResponseDto> GetAllAlbums(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<AlbumResponseDto>> localVarResponse = GetAllAlbumsWithHttpInfo(assetId, shared);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AlbumResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<AlbumResponseDto>> GetAllAlbumsWithHttpInfo(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            }
            if (shared != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "shared", shared));
            }

            localVarRequestOptions.Operation = "AlbumsApi.GetAllAlbums";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AlbumResponseDto>>("/albums", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAlbums", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AlbumResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlbumResponseDto>> GetAllAlbumsAsync(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<AlbumResponseDto>> localVarResponse = await GetAllAlbumsWithHttpInfoAsync(assetId, shared, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Only returns albums that contain the asset Ignores the shared parameter undefined: get all albums (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AlbumResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<AlbumResponseDto>>> GetAllAlbumsWithHttpInfoAsync(Guid? assetId = default(Guid?), bool? shared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            }
            if (shared != null)
            {
                localVarRequestOptions.QueryParameters.Add(ImmichApi.Client.ClientUtils.ParameterToMultiMap("", "shared", shared));
            }

            localVarRequestOptions.Operation = "AlbumsApi.GetAllAlbums";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AlbumResponseDto>>("/albums", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAlbums", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        public List<BulkIdResponseDto> RemoveAssetFromAlbum(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = RemoveAssetFromAlbumWithHttpInfo(id, bulkIdsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> RemoveAssetFromAlbumWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0)
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling AlbumsApi->RemoveAssetFromAlbum");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "AlbumsApi.RemoveAssetFromAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<BulkIdResponseDto>>("/albums/{id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAssetFromAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkIdResponseDto>> RemoveAssetFromAlbumAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = await RemoveAssetFromAlbumWithHttpInfoAsync(id, bulkIdsDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>>> RemoveAssetFromAlbumWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling AlbumsApi->RemoveAssetFromAlbum");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "AlbumsApi.RemoveAssetFromAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<BulkIdResponseDto>>("/albums/{id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAssetFromAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveUserFromAlbum(Guid id, string userId, int operationIndex = 0)
        {
            RemoveUserFromAlbumWithHttpInfo(id, userId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ImmichApi.Client.ApiResponse<Object> RemoveUserFromAlbumWithHttpInfo(Guid id, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'userId' when calling AlbumsApi->RemoveUserFromAlbum");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ImmichApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "AlbumsApi.RemoveUserFromAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/albums/{id}/user/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserFromAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserFromAlbumAsync(Guid id, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveUserFromAlbumWithHttpInfoAsync(id, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<Object>> RemoveUserFromAlbumWithHttpInfoAsync(Guid id, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'userId' when calling AlbumsApi->RemoveUserFromAlbum");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ImmichApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "AlbumsApi.RemoveUserFromAlbum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/albums/{id}/user/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserFromAlbum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlbumResponseDto</returns>
        public AlbumResponseDto UpdateAlbumInfo(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = UpdateAlbumInfoWithHttpInfo(id, updateAlbumDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlbumResponseDto</returns>
        public ImmichApi.Client.ApiResponse<AlbumResponseDto> UpdateAlbumInfoWithHttpInfo(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0)
        {
            // verify the required parameter 'updateAlbumDto' is set
            if (updateAlbumDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'updateAlbumDto' when calling AlbumsApi->UpdateAlbumInfo");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAlbumDto;

            localVarRequestOptions.Operation = "AlbumsApi.UpdateAlbumInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AlbumResponseDto>("/albums/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlbumInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlbumResponseDto</returns>
        public async System.Threading.Tasks.Task<AlbumResponseDto> UpdateAlbumInfoAsync(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<AlbumResponseDto> localVarResponse = await UpdateAlbumInfoWithHttpInfoAsync(id, updateAlbumDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateAlbumDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlbumResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<AlbumResponseDto>> UpdateAlbumInfoWithHttpInfoAsync(Guid id, UpdateAlbumDto updateAlbumDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateAlbumDto' is set
            if (updateAlbumDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'updateAlbumDto' when calling AlbumsApi->UpdateAlbumInfo");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAlbumDto;

            localVarRequestOptions.Operation = "AlbumsApi.UpdateAlbumInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AlbumResponseDto>("/albums/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlbumInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateAlbumUser(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0)
        {
            UpdateAlbumUserWithHttpInfo(id, userId, updateAlbumUserDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ImmichApi.Client.ApiResponse<Object> UpdateAlbumUserWithHttpInfo(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'userId' when calling AlbumsApi->UpdateAlbumUser");
            }

            // verify the required parameter 'updateAlbumUserDto' is set
            if (updateAlbumUserDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'updateAlbumUserDto' when calling AlbumsApi->UpdateAlbumUser");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ImmichApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateAlbumUserDto;

            localVarRequestOptions.Operation = "AlbumsApi.UpdateAlbumUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/albums/{id}/user/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlbumUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAlbumUserAsync(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateAlbumUserWithHttpInfoAsync(id, userId, updateAlbumUserDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="updateAlbumUserDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<Object>> UpdateAlbumUserWithHttpInfoAsync(Guid id, string userId, UpdateAlbumUserDto updateAlbumUserDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'userId' when calling AlbumsApi->UpdateAlbumUser");
            }

            // verify the required parameter 'updateAlbumUserDto' is set
            if (updateAlbumUserDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'updateAlbumUserDto' when calling AlbumsApi->UpdateAlbumUser");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", ImmichApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateAlbumUserDto;

            localVarRequestOptions.Operation = "AlbumsApi.UpdateAlbumUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/albums/{id}/user/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlbumUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

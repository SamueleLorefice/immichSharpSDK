/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.110.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ImmichApi.Client;
using ImmichApi.Model;

namespace ImmichApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        List<BulkIdResponseDto> AddMemoryAssets(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        ApiResponse<List<BulkIdResponseDto>> AddMemoryAssetsWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponseDto</returns>
        MemoryResponseDto CreateMemory(MemoryCreateDto memoryCreateDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponseDto</returns>
        ApiResponse<MemoryResponseDto> CreateMemoryWithHttpInfo(MemoryCreateDto memoryCreateDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteMemory(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMemoryWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponseDto</returns>
        MemoryResponseDto GetMemory(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponseDto</returns>
        ApiResponse<MemoryResponseDto> GetMemoryWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        List<BulkIdResponseDto> RemoveMemoryAssets(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        ApiResponse<List<BulkIdResponseDto>> RemoveMemoryAssetsWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MemoryResponseDto&gt;</returns>
        List<MemoryResponseDto> SearchMemories(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MemoryResponseDto&gt;</returns>
        ApiResponse<List<MemoryResponseDto>> SearchMemoriesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponseDto</returns>
        MemoryResponseDto UpdateMemory(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponseDto</returns>
        ApiResponse<MemoryResponseDto> UpdateMemoryWithHttpInfo(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<BulkIdResponseDto>> AddMemoryAssetsAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkIdResponseDto>>> AddMemoryAssetsWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponseDto</returns>
        System.Threading.Tasks.Task<MemoryResponseDto> CreateMemoryAsync(MemoryCreateDto memoryCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemoryResponseDto>> CreateMemoryWithHttpInfoAsync(MemoryCreateDto memoryCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMemoryAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemoryWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponseDto</returns>
        System.Threading.Tasks.Task<MemoryResponseDto> GetMemoryAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemoryResponseDto>> GetMemoryWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<BulkIdResponseDto>> RemoveMemoryAssetsAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BulkIdResponseDto>>> RemoveMemoryAssetsWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MemoryResponseDto&gt;</returns>
        System.Threading.Tasks.Task<List<MemoryResponseDto>> SearchMemoriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MemoryResponseDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MemoryResponseDto>>> SearchMemoriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponseDto</returns>
        System.Threading.Tasks.Task<MemoryResponseDto> UpdateMemoryAsync(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemoryResponseDto>> UpdateMemoryWithHttpInfoAsync(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoriesApi : IMemoriesApiSync, IMemoriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MemoriesApi : IMemoriesApi
    {
        private ImmichApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemoriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemoriesApi(string basePath)
        {
            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                new ImmichApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MemoriesApi(ImmichApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ImmichApi.Client.Configuration.MergeConfigurations(
                ImmichApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ImmichApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MemoriesApi(ImmichApi.Client.ISynchronousClient client, ImmichApi.Client.IAsynchronousClient asyncClient, ImmichApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ImmichApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ImmichApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ImmichApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ImmichApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ImmichApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        public List<BulkIdResponseDto> AddMemoryAssets(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = AddMemoryAssetsWithHttpInfo(id, bulkIdsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> AddMemoryAssetsWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0)
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling MemoriesApi->AddMemoryAssets");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "MemoriesApi.AddMemoryAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<BulkIdResponseDto>>("/memories/{id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMemoryAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkIdResponseDto>> AddMemoryAssetsAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = await AddMemoryAssetsWithHttpInfoAsync(id, bulkIdsDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>>> AddMemoryAssetsWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling MemoriesApi->AddMemoryAssets");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "MemoriesApi.AddMemoryAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<BulkIdResponseDto>>("/memories/{id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMemoryAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponseDto</returns>
        public MemoryResponseDto CreateMemory(MemoryCreateDto memoryCreateDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<MemoryResponseDto> localVarResponse = CreateMemoryWithHttpInfo(memoryCreateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponseDto</returns>
        public ImmichApi.Client.ApiResponse<MemoryResponseDto> CreateMemoryWithHttpInfo(MemoryCreateDto memoryCreateDto, int operationIndex = 0)
        {
            // verify the required parameter 'memoryCreateDto' is set
            if (memoryCreateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'memoryCreateDto' when calling MemoriesApi->CreateMemory");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = memoryCreateDto;

            localVarRequestOptions.Operation = "MemoriesApi.CreateMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemoryResponseDto>("/memories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponseDto</returns>
        public async System.Threading.Tasks.Task<MemoryResponseDto> CreateMemoryAsync(MemoryCreateDto memoryCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<MemoryResponseDto> localVarResponse = await CreateMemoryWithHttpInfoAsync(memoryCreateDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryCreateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<MemoryResponseDto>> CreateMemoryWithHttpInfoAsync(MemoryCreateDto memoryCreateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memoryCreateDto' is set
            if (memoryCreateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'memoryCreateDto' when calling MemoriesApi->CreateMemory");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = memoryCreateDto;

            localVarRequestOptions.Operation = "MemoriesApi.CreateMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemoryResponseDto>("/memories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteMemory(Guid id, int operationIndex = 0)
        {
            DeleteMemoryWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ImmichApi.Client.ApiResponse<Object> DeleteMemoryWithHttpInfo(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemoriesApi.DeleteMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/memories/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMemoryAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMemoryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<Object>> DeleteMemoryWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemoriesApi.DeleteMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/memories/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponseDto</returns>
        public MemoryResponseDto GetMemory(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<MemoryResponseDto> localVarResponse = GetMemoryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponseDto</returns>
        public ImmichApi.Client.ApiResponse<MemoryResponseDto> GetMemoryWithHttpInfo(Guid id, int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemoriesApi.GetMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemoryResponseDto>("/memories/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponseDto</returns>
        public async System.Threading.Tasks.Task<MemoryResponseDto> GetMemoryAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<MemoryResponseDto> localVarResponse = await GetMemoryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<MemoryResponseDto>> GetMemoryWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MemoriesApi.GetMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemoryResponseDto>("/memories/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BulkIdResponseDto&gt;</returns>
        public List<BulkIdResponseDto> RemoveMemoryAssets(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = RemoveMemoryAssetsWithHttpInfo(id, bulkIdsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BulkIdResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> RemoveMemoryAssetsWithHttpInfo(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0)
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling MemoriesApi->RemoveMemoryAssets");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "MemoriesApi.RemoveMemoryAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<BulkIdResponseDto>>("/memories/{id}/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMemoryAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BulkIdResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<BulkIdResponseDto>> RemoveMemoryAssetsAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>> localVarResponse = await RemoveMemoryAssetsWithHttpInfoAsync(id, bulkIdsDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bulkIdsDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BulkIdResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<BulkIdResponseDto>>> RemoveMemoryAssetsWithHttpInfoAsync(Guid id, BulkIdsDto bulkIdsDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bulkIdsDto' is set
            if (bulkIdsDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'bulkIdsDto' when calling MemoriesApi->RemoveMemoryAssets");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = bulkIdsDto;

            localVarRequestOptions.Operation = "MemoriesApi.RemoveMemoryAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<BulkIdResponseDto>>("/memories/{id}/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMemoryAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MemoryResponseDto&gt;</returns>
        public List<MemoryResponseDto> SearchMemories(int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<List<MemoryResponseDto>> localVarResponse = SearchMemoriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MemoryResponseDto&gt;</returns>
        public ImmichApi.Client.ApiResponse<List<MemoryResponseDto>> SearchMemoriesWithHttpInfo(int operationIndex = 0)
        {
            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoriesApi.SearchMemories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MemoryResponseDto>>("/memories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMemories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MemoryResponseDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<MemoryResponseDto>> SearchMemoriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<List<MemoryResponseDto>> localVarResponse = await SearchMemoriesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MemoryResponseDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<List<MemoryResponseDto>>> SearchMemoriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoriesApi.SearchMemories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MemoryResponseDto>>("/memories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMemories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponseDto</returns>
        public MemoryResponseDto UpdateMemory(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0)
        {
            ImmichApi.Client.ApiResponse<MemoryResponseDto> localVarResponse = UpdateMemoryWithHttpInfo(id, memoryUpdateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponseDto</returns>
        public ImmichApi.Client.ApiResponse<MemoryResponseDto> UpdateMemoryWithHttpInfo(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0)
        {
            // verify the required parameter 'memoryUpdateDto' is set
            if (memoryUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'memoryUpdateDto' when calling MemoriesApi->UpdateMemory");
            }

            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = memoryUpdateDto;

            localVarRequestOptions.Operation = "MemoriesApi.UpdateMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MemoryResponseDto>("/memories/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponseDto</returns>
        public async System.Threading.Tasks.Task<MemoryResponseDto> UpdateMemoryAsync(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ImmichApi.Client.ApiResponse<MemoryResponseDto> localVarResponse = await UpdateMemoryWithHttpInfoAsync(id, memoryUpdateDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ImmichApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="memoryUpdateDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponseDto)</returns>
        public async System.Threading.Tasks.Task<ImmichApi.Client.ApiResponse<MemoryResponseDto>> UpdateMemoryWithHttpInfoAsync(Guid id, MemoryUpdateDto memoryUpdateDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memoryUpdateDto' is set
            if (memoryUpdateDto == null)
            {
                throw new ImmichApi.Client.ApiException(400, "Missing required parameter 'memoryUpdateDto' when calling MemoriesApi->UpdateMemory");
            }


            ImmichApi.Client.RequestOptions localVarRequestOptions = new ImmichApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ImmichApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ImmichApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ImmichApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = memoryUpdateDto;

            localVarRequestOptions.Operation = "MemoriesApi.UpdateMemory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (cookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("immich_access_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("immich_access_token", this.Configuration.GetApiKeyWithPrefix("immich_access_token")));
            }
            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MemoryResponseDto>("/memories/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
